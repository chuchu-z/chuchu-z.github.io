{"meta":{"title":"chuchu-z","subtitle":"","description":"借君三十年，繁花万里好江山","author":"chuchu-z","url":"https://github.com/chuchu-z","root":"/"},"posts":[{"title":"Github+Actions实现Hexo自动化部署","slug":"hexo-blog-git-actions","date":"2023-02-13T21:24:23.000Z","updated":"2023-02-13T23:47:17.054Z","comments":true,"path":"posts/hexo-blog-git-actions/","link":"","permalink":"https://github.com/chuchu-z/posts/hexo-blog-git-actions/","excerpt":"","text":"Github+Actions实现Hexo自动化部署前言 由于半夜睡不着，突然想到博客很久没有更新了， 准备把很久之前写好的文章发布一下，但是发现原来使用的 travis-ci 没有触发， 去查了一下才知道 Travis CI 在 2020年 11 月 2 日就改变了收费策略 ，原来我现在用的免费方案，系统会赠送 10000 积分（一次性）。Linux 机器上每分钟消耗 10 积分，macOS 机器上每分钟消耗 50 积分，我的积分已经消耗完了。一开始我觉得比较诧异，因为我以前从来没关注有这个积分机制，以为公共仓库使用 Travis CI 服务都是免费的。被迫无奈，本来只是想发个文章，变成了连夜更换CI/CD，中途还发现域名快到期了顺便续了一年😥。 Hexo 持续集成由于本人是通过Github Pages方式来实现博客托管的，好处是不需要自己购买服务器和域名， 只需要在github上创建一个repository，这个repository的名字还有要求必须是username.github.io，再随便写个静态html内容上传就可以直接访问了，具体方法这里不再多说。 先简单介绍一下项目仓库，源代码和hexo编译后的静态资源都在同一仓库（chuchu-z.github.io）， 只是分支不同，src分支为源代码仓库， master分支为hexo编译后的静态资源， 也就是博客展示出来的内容。 生成公钥私钥ssh-keygen -t rsa -C &quot;$(git config user.name)&quot; -f github-deploy-key 添加仓库环境变量设置 HEXO_DEPLOY_PUB，value 是上步生成的 github-deploy-key.pub 文件内容。 image-20230214054920822 设置 HEXO_DEPLOY_PRI，value 是上步生成的 github-deploy-key 文件内容。 image-20230214055043562 编写配置文件deploy.yml在 myblog 项目根目录下创建 .github/workflows/deploy.yml 文件。 # Action 的名字 name: Hexo Auto Deploy on: # 触发条件1：src 分支收到 push 后执行任务。 push: branches: - src # 触发条件2：手动按钮 workflow_dispatch: # 这里放环境变量,需要替换成你自己的 env: # Hexo 编译后使用此 git 用户部署到 github 仓库 GIT_USER: chuchu-z # Hexo 编译后使用此 git 邮箱部署到 github 仓库 GIT_EMAIL: 1813713320@qq.com # Hexo 编译后要部署的 github 仓库 GIT_DEPLOY_REPO: chuchu-z&#x2F;chuchu-z.github.io # Hexo 编译后要部署到的分支 GIT_DEPLOY_BRANCH: master jobs: build: name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125; # 配置运行的机器环境 runs-on: ubuntu-latest if: github.event.repository.owner.id &#x3D;&#x3D; github.event.sender.id strategy: matrix: os: [ubuntu-latest] node_version: [14] # 执行步骤 steps: - name: Checkout uses: actions&#x2F;checkout@v2 - name: Checkout deploy repo uses: actions&#x2F;checkout@v2 with: repository: $&#123;&#123; env.GIT_DEPLOY_REPO &#125;&#125; ref: $&#123;&#123; env.GIT_DEPLOY_BRANCH &#125;&#125; path: .deploy_git - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125; uses: actions&#x2F;setup-node@v1 with: node-version: $&#123;&#123; matrix.node_version &#125;&#125; # 授权密钥 - name: Configuration environment env: HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125; run: | sudo timedatectl set-timezone &quot;Asia&#x2F;Shanghai&quot; mkdir -p ~&#x2F;.ssh&#x2F; echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~&#x2F;.ssh&#x2F;id_rsa chmod 600 ~&#x2F;.ssh&#x2F;id_rsa ssh-keyscan -t rsa github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts # coding 已取消同步 ssh-keyscan -t rsa e.coding.net &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts ssh-keyscan -t rsa gitee.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL # 安装并执行hexo - name: Install dependencies run: | npm install -g hexo-cli --no-fund npm install -g --no-fund hexo clean hexo generate - name: Deploy hexo run: | npm run deploy 把配置文件提交到github仓库之后， 只要src（源代码）分支触发push操作，就会自动触发部署，在Actions就可以看到具体部署情况。 总结在学习了网上其他大佬们的方法后自己稍微做了些修改，也是总算成功完成了，感觉这次处理起来比上次使用travis-ci简单快的多，也可能是之前踩过不少坑了，这次比较顺利，早知道github+actions这么方便就不用travis-ci了， 不过要不是travis-ci收费了我现在也还不知道github+actions也挺好用，刚好天亮了睡觉😴。","categories":[{"name":"Github","slug":"github","permalink":"https://github.com/chuchu-z/categories/github/"},{"name":"Hexo","slug":"github/hexo","permalink":"https://github.com/chuchu-z/categories/github/hexo/"}],"tags":[{"name":"Github","slug":"github","permalink":"https://github.com/chuchu-z/tags/github/"},{"name":"Hexo","slug":"hexo","permalink":"https://github.com/chuchu-z/tags/hexo/"}]},{"title":"gRPC的简介与Protobuf的使用","slug":"gRPC-info-and-Protobuf-use","date":"2023-02-13T19:36:50.000Z","updated":"2023-02-13T23:47:17.054Z","comments":true,"path":"posts/gRPC-info-and-Protobuf-use/","link":"","permalink":"https://github.com/chuchu-z/posts/gRPC-info-and-Protobuf-use/","excerpt":"","text":"gRPC的简介与Protobuf的使用 gRPC实现微服务，将大的项目拆分为多个小且独立的业务模块；即服务；各服务之间使用高效的Protobuf协议进行RPC调用。 Protobuf 实际是一套类似Json或者XML的数据传输格式和规范，用于不同应用或进程之间进行通信时使用。通信时所传递的信息是通过Protobuf定义的message数据结构进行打包，然后编译成二进制的码流再进行传输或者存储。 gRPC开发的核心文件是*.proto文件 ，它定义了gRPC服务和消息的约定。根据这个文件，gRPC框架可以通过protoc 工具生成服务基类，消息和完整的客户端代码, 支持 C++、Java、Go、Python、Ruby、C#、Node.js、Android Java、Objective-C、PHP等多种编程语言。 protoc 是用于将proto文件编程成各种语言源码文件的工具。 PHP使用gRPC安装扩展在PHP中使用gRPC需要先安装gRPC扩展和protobuf扩展 # 使用pecl安装 # 查看pecl版本 pecl version #如果没有安装 pecl # php版本 > 7 wget http://pear.php.net/go-pear.phar php go-pear.phar # php版本 &lt; 7 yum install php-pear #否则会报错PHP Parse error: syntax error, unexpected //'new' (T_NEW) in /usr/share/pear/PEAR/Frontend.php on //line 91 # 查看版本 /usr/local/php/bin/pear version # 使用pecl安装grpc和protobuf /usr/local/php/bin/pecl install grpc /usr/local/php/bin/pecl install protobuf # 写入到php.ini配置(重启php生效) echo \"extension=grpc.so\" >> /usr/local/php/etc/php.ini echo \"extension=protobuf.so\" >> /usr/local/php/etc/php.ini php -m | grep grpc php -m | grep protobuf 安装protoc工具下载 protoc源码 具体版本要选择与proto文件中定义一致, 否则报错无法解析proto文件, 目前我们使用的是proto3, 所以我当前使用的protoc工具是3.10.1版本 # 先安装协议缓存编译器(否则解析proto文件生成对应代码时会乱码) yum install protobuf-compiler libtool libsysfs # 解压 tar -xvf protobuf-3.10.1.tar.gz # 编译安装 cd protobuf-3.10.1 ./autogen.sh ./configure # 如果报错 configure: WARNING: no configuration information is in third_party/googletest # 需要下载googletest，下载地址:https://github.com/google/googletest/releases # 直接解压并重命名googletest,放在 protobuf-3.10.1/third_party/googletest，然后重新执行./autogen.sh之后的 make make install # 查看protoc版本 protoc --version 使用protoc工具使用protoc工具, 生成PHP代码文件 # 执行命令 protoc --php_out=out_dir file.proto # --php_out 表示生成PHP代码格式 # out_dir 生成代码要存放的路径 # file.proto 要编译的proto文件 示例: protoc工具生成php代码1 protoc工具生成php代码2 aexlib（工作目录）中调用gRPC生成的代码放到aexlib/Lib/Plugin/ 目录下, 新建一个Api.php和Client.php, 编写具体的业务逻辑, 并在aexlib/Lib/Model/**下新建model**, model内调用Api.php具体方法","categories":[{"name":"Other","slug":"other","permalink":"https://github.com/chuchu-z/categories/other/"}],"tags":[{"name":"Other","slug":"other","permalink":"https://github.com/chuchu-z/tags/other/"}]},{"title":"Linux Shell脚本中使用alias定义别名","slug":"linux-shell-alias-config","date":"2022-03-31T01:57:18.000Z","updated":"2023-02-13T23:47:17.058Z","comments":true,"path":"posts/linux-shell-alias-config/","link":"","permalink":"https://github.com/chuchu-z/posts/linux-shell-alias-config/","excerpt":"在我们使用终端时, 为了提高平时工作效率和减少常用命令过长, 敲起来浪费时间, 可在/etc/profile文件中配置alias，自定指令的别名","text":"在我们使用终端时, 为了提高平时工作效率和减少常用命令过长, 敲起来浪费时间, 可在/etc/profile文件中配置alias，自定指令的别名 打开/etc/profile配置文件 vim /etc/profile 在文件末尾增加以下配置 #[alias] ##cd dir## alias -- -='cd -' # 此处意思为输入 - 回车, 相当于执行 cd -, 快速切换回上一个目录(两个目录之间来回切换) alias ..='cd ..' alias e='exit' alias 'www'='cd $www' # $www是个人配置的环境变量, $www指向的是工作目录 ##vim file## alias 'vp'='vim /etc/profile' alias 'vv'='vim /etc/vimrc' alias 'sp'='source /etc/profile' ##git## alias 'gs'='git status' alias 'gaa'='git add .' alias 'gcm'='git commit -m' alias 'gco'='git checkout' alias 'gb'='git branch -vvv' alias 'gd'='git diff' alias 'cls'='clear' alias -- --='git checkout -' #此处意思为输入 -- 回车, 相当于执行 git checkout -, 快速切换回上一个分支(两个分支之间来回切换) alias 'show'='git show' alias 'push'='git push origin `git branch --show-current`' alias 'fpush'='git push -f origin `git branch --show-current`' #强推 alias 'pull'='git pull origin `git branch --show-current`' alias 'rpull'='git pull origin `git branch --show-current` --rebase' #pull时增加 --rebase参数 alias 'ml'='git log --author=`git config user.name`' #查看本人提交的log alias 'gl'='git log' alias 'ggl'='git log --graph' alias 'gglp'='git log --graph --pretty=oneline --abbrev-commit' #可视化查看分支线的情况 alias 'review'='review() &#123; git status --short | egrep ^*.php | sed \"s/^ *//\" | egrep ^[^D] | tr -s \" \"| cut -d\" \" -f 2 | egrep -v database/migrations | xargs $1;&#125;;review' #列出修改过未提交的php文件 alias 'qq'='review \"git checkout\"' #把列出修改过未提交的php文件当做参数 提供给git checkout, 全部撤销 ##ssh## alias 'chuchu'='ssh root@ip' ##Docker## alias 'dkre'='docker-compose restart' alias 'dkup'='docker-compose up' alias 'dkop'='docker-compose stop' alias 'dkphp'=\"winpty docker exec -it `docker ps --filter='name=php7' -q` bash\" #快速进入docker的php7容器 alias 'dkphp5'=\"winpty docker exec -it `docker ps --filter='name=php5' -q` bash\" 执行 source /etc/profile 重新加载刚修改配置生效 source /etc/profile","categories":[{"name":"Linux","slug":"linux","permalink":"https://github.com/chuchu-z/categories/linux/"},{"name":"Shell","slug":"linux/shell","permalink":"https://github.com/chuchu-z/categories/linux/shell/"}],"tags":[{"name":"Linux","slug":"linux","permalink":"https://github.com/chuchu-z/tags/linux/"},{"name":"Shell","slug":"shell","permalink":"https://github.com/chuchu-z/tags/shell/"}]},{"title":"Git 中的奇葩玩法","slug":"git-ridiculous-behavior","date":"2022-03-25T11:01:50.000Z","updated":"2023-02-13T23:47:17.054Z","comments":true,"path":"posts/git-ridiculous-behavior/","link":"","permalink":"https://github.com/chuchu-z/posts/git-ridiculous-behavior/","excerpt":"一个 Git 随机生成提交日志网站, 每次刷新的内容随机 太搞了, 不怕挨揍的壮士可以使用如下命令进行日常代码的提交😂","text":"一个 Git 随机生成提交日志网站, 每次刷新的内容随机 太搞了, 不怕挨揍的壮士可以使用如下命令进行日常代码的提交😂 git commit -m $(curl -s http://whatthecommit.com/index.txt) http://whatthecommit.com 没有最坑，只有更坑！此仓库专门收集史上最坑爹的代码片段，专治低血压 😵 https://gitee.com/oschina/bullshit-codes/tree/master","categories":[{"name":"Git","slug":"git","permalink":"https://github.com/chuchu-z/categories/git/"}],"tags":[{"name":"Git","slug":"git","permalink":"https://github.com/chuchu-z/tags/git/"}]},{"title":"关于谷歌Chrome浏览器非安全端口限制问题","slug":"chrome-proxy-limit","date":"2022-03-24T04:38:16.000Z","updated":"2023-02-13T23:47:17.054Z","comments":true,"path":"posts/chrome-proxy-limit/","link":"","permalink":"https://github.com/chuchu-z/posts/chrome-proxy-limit/","excerpt":"关于前段时间深圳疫情严重, 公司选择通过VPN居家远程办公 有个项目在App端测试由于无法通过VPN请求Api, 运维开放了外网地址并指定端口","text":"关于前段时间深圳疫情严重, 公司选择通过VPN居家远程办公 有个项目在App端测试由于无法通过VPN请求Api, 运维开放了外网地址并指定端口 但在Chrome浏览器上打开时无法正常得到正常的响应, 而使用postman等测试工具是可以正常响应的 这个问题以前有遇到过，是因为 Chrome 浏览器对非安全端口进行了限制, 具体端口可在这里查看 https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc 解决的办法windows只需要右键Chrome浏览器快捷图标, 在属性设置里面的目标处增加以下参数, 然后关闭Chrome重新打开即可正常访问 # 多个端口号以英文逗号隔开 --explicitly-allowed-ports=10080,30300 Mac # Chrome浏览器的解决方案 open -a /Applications/Google Chrome.app/Contents/MacOS/Google Chrome --explicitly-allowed-ports=6666,8888 Chrome 302重定向本以为解决完端口问题后就可以快乐地编码, 然而当我正常打开页面登录后, 又遇到了另一个问题 登录成功后, 只要点击其他任意跳转, 页面会被重定向跳回到登录界面, 初步判断是因为Cookies的问题, 导致登录态没有了 遗留问题1. 无法确定是因为端口的问题导致Cookies丢失 具体是事例在网上只找到了这个, 不确定是否同样的原因, 但因为我的Chrome浏览器版本目前是99.0.4844.82版本, 正如此博主所说 在chrome91及其以上版本，无法找到SameSite by default cookies和Cookies without SameSite must be secure两项配置 虽然没有解决我的问题, 但起码提供了参考 遗留问题2. 无法验证该方案是否可行","categories":[{"name":"Other","slug":"other","permalink":"https://github.com/chuchu-z/categories/other/"}],"tags":[{"name":"Other","slug":"other","permalink":"https://github.com/chuchu-z/tags/other/"}]},{"title":"Win10 自定义 Git-Bash 终端界面 + 一言与终端结合","slug":"windows10-git-bash","date":"2022-02-25T02:39:27.000Z","updated":"2023-02-13T23:47:17.058Z","comments":true,"path":"posts/windows10-git-bash/","link":"","permalink":"https://github.com/chuchu-z/posts/windows10-git-bash/","excerpt":"由于Git默认的界面长的实在是不够美观, 平时用起来都无法赏心悦目, 参考网上的一些文章资料, 做了下改动","text":"由于Git默认的界面长的实在是不够美观, 平时用起来都无法赏心悦目, 参考网上的一些文章资料, 做了下改动 修改Git Bash 窗口左上角标题#该命令是一次性的,关闭后重新打开会恢复, 后面有完整的 echo -ne \"\\\\e]0;title name\\\\a\" 修改命令提示符具体操作 打开 git-prompt.sh 文件 vim /etc/profile.d/git-prompt.sh 将其修改为如下内容： if test -f /etc/profile.d/git-sdk.sh then TITLEPREFIX=SDK-$&#123;MSYSTEM#MINGW&#125; else TITLEPREFIX=$MSYSTEM fi if test -f ~/.config/git/git-prompt.sh then . ~/.config/git/git-prompt.sh else PS1='\\[\\033]0;Bash\\007\\]' # 窗口标题 PS1=\"$PS1\"'\\n' # 换行 PS1=\"$PS1\"'\\[\\033[32;1m\\]' # 高亮绿色 PS1=\"$PS1\"' ➜ ' # unicode 字符，右箭头, 如果显示不出来大概率是utf-8编码问题 PS1=\"$PS1\"'\\[\\033[33;1m\\]' # 高亮黄色 PS1=\"$PS1\"'\\W' # 当前目录 PS1=\"$PS1\"'\\[\\033[34;1m\\]' # 高亮蓝色 PS1=\"$PS1\"' [\\t]' # 当前时间 if test -z \"$WINELOADERNOEXEC\" then GIT_EXEC_PATH=\"$(git --exec-path 2>/dev/null)\" COMPLETION_PATH=\"$&#123;GIT_EXEC_PATH%/libexec/git-core&#125;\" COMPLETION_PATH=\"$&#123;COMPLETION_PATH%/lib/git-core&#125;\" COMPLETION_PATH=\"$COMPLETION_PATH/share/git/completion\" if test -f \"$COMPLETION_PATH/git-prompt.sh\" then . \"$COMPLETION_PATH/git-completion.bash\" . \"$COMPLETION_PATH/git-prompt.sh\" PS1=\"$PS1\"'\\[\\033[31m\\]' # 红色 PS1=\"$PS1\"'`__git_ps1`' # git 插件 fi fi PS1=\"$PS1\"'\\[\\033[36m\\] ' # 青色 fi MSYS2_PS1=\"$PS1\" 这个非常像 oh-my-zsh 的风格, 其实一开始就是想用zsh终端的, 奈何windows不支持, 如果平时日常开发想装的话也可以在linux虚拟主机或者docker里面装一个, zsh在目前来说可以说是最强大的shell了, 谁用谁知道 修改界面主题vim ~/.minttyrc 默认配置如下: Transparency=low Language= ForegroundColour=0,255,64 CursorColour=0,255,64 CursorType=block Scrollbar=none FontHeight=12 把以下内容添加到配置文件里面： Font=Fira Code Medium FontHeight=14 FontHeight=14 Transparency=low FontSmoothing=default Locale=C Charset=UTF-8 Columns=88 Rows=26 OpaqueWhenFocused=no Scrollbar=none Language=zh_CN ForegroundColour=131,148,150 BackgroundColour=0,43,54 CursorColour=220,130,71 BoldBlack=128,128,128 Red=255,64,40 BoldRed=255,128,64 Green=64,200,64 BoldGreen=64,255,64 Yellow=190,190,0 BoldYellow=255,255,64 Blue=0,128,255 BoldBlue=128,160,255 Magenta=211,54,130 BoldMagenta=255,128,255 Cyan=64,190,190 BoldCyan=128,255,255 White=200,200,200 BoldWhite=255,255,255 BellTaskbar=no Term=xterm FontWeight=400 FontIsBold=no 最后重启Git-Bash就可以看到配置好的界面了 效果图: image-20220225095728006 另外说一下第一行是在 Options 中选择字体时设置的，我使用了 Fira Code， 14号字体, Fira Code就是一款为写程序而生的字体 以上内容参考网络文章 有兴趣的可以深入了解这里, 不过也有可能无法访问了 Fira CodeFira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有等宽等基本属性外，还加入了编程连字特性（ligatures）。 Fira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「&gt;=」变成「≥ 」等等，以此来提高代码的可读性 本人的使用的IDE也是装的这一款字体, 咳咳跑题了.. 一言与终端结合去年无意发现一个名叫 一言 的网站, 这个网站只是单纯的提供一句话, 可以是动漫中的台词，也可以是网络上的各种小段子。 或是感动，或是开心，有或是单纯的回忆 并且还官方还提供了 API接口文档 供我们免费调用, 于是并尝试了把该功能与终端做结合, 大概就是, 启动终端时请求API, 把随机返回的句子显示在终端上, 我认为是个有趣的想法, 具体实现思路, 写一个请求一言API的脚本, 终端启动时自动调用一次这个脚本 效果如下: 图片 编写一言脚本, 文件名和路径没有具体要求, 看个人 vim yy 具体代码GitHub上也有, 直接拿下面的也行: # 一言 # 返回普通文本 #`curl -ks https://v1.hitokoto.cn/?encode=text` url='https://v1.hitokoto.cn' if [ x$1 != x ]; then url='https://v1.hitokoto.cn?'$1 fi # 处理 json 数据(处理json数据需要安装jq) json=`curl -ks $url` # linux 安裝jq # yum install epel-release # yum list jq # yum install jq # windows 安裝jq # https://stedolan.github.io/jq/ random=$[RANDOM%7+31] echo -e content=`echo $&#123;json&#125; | jq '.hitokoto' | sed 's/\"//g' | tr -d '\\n'` printf \"\\033[1;$&#123;random&#125;m%s\\033[0m\" \"『 \" $content \" 』\" from_who=`echo $&#123;json&#125; | jq '.from_who' | sed 's/\"//g' | tr -d '\\n'` echo -e if [ \"$from_who\" == 'null' ] then from_who='匿名' fi length=`expr $&#123;#content&#125; \\* 2` printf \"\\033[1;$&#123;random&#125;m%$&#123;length&#125;s\\033[0m\" \"—— $from_who\" from=`echo $&#123;json&#125; | jq '.from' | sed 's/\"//g' | tr -d '\\n'` printf \"\\033[1;$&#123;random&#125;m%s\\033[0m\" \"「\" $from \"」\" echo -e exit 0 编写完后可以试着执行 yy脚本一下试试 (代码里有说明要安装jq处理json数据) 具体效果 最后编辑~/.bashrc文件, 因为Git-Bash启动时会加载此文件 vim ~/.bashrc 在文件内容里加上yy后保存退出重新启动Git-Bash就行, (我能直接执行yy是配置了环境变量的, 如果没有配置的话需要写绝对路径) # vim ~/.bashrc # Git-Bash 初始化加载此配置文件 # shopt -s expand_aliases # 允许shell脚本中使用 alias 命令 # 经测试, 在 #!/bin/sh 下, 该命令可有可无, 不影响 alias 的使用 # 在 !/bin/bash 下，才有影响 yy","categories":[{"name":"Git","slug":"git","permalink":"https://github.com/chuchu-z/categories/git/"}],"tags":[{"name":"Git","slug":"git","permalink":"https://github.com/chuchu-z/tags/git/"}]},{"title":"Docker环境初始化及安装php扩展","slug":"docker-init-php-extensions","date":"2021-12-30T06:53:42.000Z","updated":"2023-02-13T23:47:17.054Z","comments":true,"path":"posts/docker-init-php-extensions/","link":"","permalink":"https://github.com/chuchu-z/posts/docker-init-php-extensions/","excerpt":"Docker环境初始化及安装php扩展","text":"Docker环境初始化及安装php扩展 yum -y install vim vim /root/.bashrc # 设置alias alias e='exit' alias www='cd /home/www/task_server' # 写入设置utf8编码,否则乱码,设置好后先保存退出,并执行source /root/.bashrc生效,再设置PS1变量 export LANG=\"en_US.utf8\" # 设置完编码后这里先退出保存一次,先让编码生效, 然后再打开编辑 source /root/.bashrc # 设置PS1变量 export PS1=\"\\[\\033]0;Docker\\007\\]\\n\\[\\033[32;1m\\] ➜ \\[\\033[33;1m\\]\\W\\[\\033[34;1m\\] [\\t]\\[\\033[31m\\]\\[\\033[36m\\] \" # 保存退出 source /root/.bashrc # 新框架资产中心需要用到GRPC, Docker环境下安装GRPC # 查看版本 pecl version #如果没有安装 pecl # php版本 > 7 wget http://pear.php.net/go-pear.phar php go-pear.phar # php版本 &lt; 7 yum install php-pear #否则会报错PHP Parse error: syntax error, unexpected //'new' (T_NEW) in /usr/share/pear/PEAR/Frontend.php on //line 91 # 安装 grpc pecl install grpc # 因为pecl没有加入PATH变量, 如果默认pecl PHP版本小于7.0 则可以使用一下路径方式或者把/usr/local/php/bin/加入PATH变量 /usr/local/php/bin/pecl install protobuf /usr/local/php/bin/pecl install grpc /usr/local/php/bin/pecl install apcu # GCC版本4.8编译报错, 升级版本到gcc 7.3 yum -y install centos-release-scl yum -y install devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils scl enable devtoolset-7 bash echo \"source /opt/rh/devtoolset-7/enable\" >>/etc/profile # ssh证书问题 如果没有openssl文件夹先创建 wget http://curl.haxx.se/ca/cacert.pem &amp;&amp; mv cacert.pem /usr/local/openssl/cert.pem # 写入配置 echo \"extension=grpc.so\" >> /usr/local/php/etc/php.ini echo \"extension=protobuf.so\" >> /usr/local/php/etc/php.ini echo \"extension=apcu.so\" >> /usr/local/php/etc/php.ini #重启Docker Docker 启动报错Docker.Core.Backend.BackendException: Error response from daemon: open \\\\.\\pipe\\docker_engine_linux: The system cannot find the file specified. 在win10 管理员身份打开cmd命令行提示符执行: Net stop com.docker.service Net start com.docker.service 以往安装时执行过的命令参考1 vp 2 php -m 3 e 4 logout 5 exit 6 exit 7 yum -y install vim 8 vim /root/.bashrc 9 source /root/.bashrc 10 vim /root/.bashrc 11 source /root/.bashrc 12 pecl version 13 wget http://pear.php.net/go-pear.phar 14 php go-pear.phar 15 wget http://pear.php.net/go-pear.phar 16 php go-pear.phar 17 yum install php-pear 18 pecl install grpc 19 /usr/local/php/bin/pecl install protobuf 20 /usr/local/php/bin/pecl install protobuf 21 /usr/local/php/bin/pecl install grpc 22 yum install php70w-devel 23 /usr/bin/phpize 24 which phpize 25 /usr/bin/phpize 26 yum install php-devel 27 php -v 28 yum install php70w-devel 29 /usr/bin/phpize 30 which php 31 cd /usr/local/bin/php 32 pwd 33 ll 34 /usr/local/php/bin/pecl install protobuf 35 /usr/local/php/bin/pecl install grpc 36 gcc --version 37 g++ --version 38 yum -y install centos-release-scl 39 yum -y install devtoolset-6-gcc devtoolset-6-gcc-c++ devtoolset-6-binutils 40 scl enable devtoolset-6 bash 41 yum install centos-release-scl scl-utils-build 42 yum list all --enablerepo='centos-sclo-rh' 43 yum install devtoolset-4-gcc.x86_64 devtoolset-4-gcc-c++.x86_64 devtoolset-4-gcc-gdb-plugin.x86_64 44 scl --list 或 scl -l 45 scl --list 46 gcc -v 47 php -m 48 e 49 /usr/local/php/bin/pecl install protobuf 50 /usr/local/php/bin/pecl channel-update pecl.php.net 51 /usr/local/php/bin/pecl install protobuf 52 e 53 pecl version 54 wget http://pear.php.net/go-pear.phar 55 php go-pear.phar 56 vim /etc/profile 57 vim ~/.bashrc 58 vim ~/.bashrc 59 source ~/.bashrc 60 gcc --version 61 g++ --version 62 /usr/local/php/bin/pecl install protobuf 63 wget http://curl.haxx.se/ca/cacert.pem &amp;&amp; mv cacert.pem /usr/local/openssl/cert.pem 64 ll 65 /usr/local/php/bin/pecl install protobuf 66 /usr/local/php/bin/pecl install grpc 67 /usr/local/php/bin/pecl install grpc 68 /usr/local/php/bin/pecl install apcu 69 /usr/local/php/bin/pecl install apcu 70 wget http://curl.haxx.se/ca/cacert.pem &amp;&amp; mv cacert.pem /usr/local/openssl/cert.pem 71 ll 72 cd /usr/local/openssl 73 cd /usr/local/ 74 mkdir openssl 75 cd - 76 mv cacert.pem /usr/local/openssl/cert.pem 77 /usr/local/php/bin/pecl install apcu 78 vim /usr/local/php/etc/php.ini 79 e 80 pecl install grpc 81 pecl channel-update pecl.php.net 82 pecl install grpc 83 yum -y install centos-release-scl 84 yum -y install devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils 85 scl enable devtoolset-7 bash 86 e 87 www 88 php tinyBell.php 89 php tinyBell.php start 90 php tinyBell.php start 91 pwd 92 e","categories":[{"name":"Docker","slug":"docker","permalink":"https://github.com/chuchu-z/categories/docker/"}],"tags":[{"name":"Docker","slug":"docker","permalink":"https://github.com/chuchu-z/tags/docker/"}]}],"categories":[{"name":"Github","slug":"github","permalink":"https://github.com/chuchu-z/categories/github/"},{"name":"Hexo","slug":"github/hexo","permalink":"https://github.com/chuchu-z/categories/github/hexo/"},{"name":"Other","slug":"other","permalink":"https://github.com/chuchu-z/categories/other/"},{"name":"Linux","slug":"linux","permalink":"https://github.com/chuchu-z/categories/linux/"},{"name":"Shell","slug":"linux/shell","permalink":"https://github.com/chuchu-z/categories/linux/shell/"},{"name":"Git","slug":"git","permalink":"https://github.com/chuchu-z/categories/git/"},{"name":"Docker","slug":"docker","permalink":"https://github.com/chuchu-z/categories/docker/"}],"tags":[{"name":"Github","slug":"github","permalink":"https://github.com/chuchu-z/tags/github/"},{"name":"Hexo","slug":"hexo","permalink":"https://github.com/chuchu-z/tags/hexo/"},{"name":"Other","slug":"other","permalink":"https://github.com/chuchu-z/tags/other/"},{"name":"Linux","slug":"linux","permalink":"https://github.com/chuchu-z/tags/linux/"},{"name":"Shell","slug":"shell","permalink":"https://github.com/chuchu-z/tags/shell/"},{"name":"Git","slug":"git","permalink":"https://github.com/chuchu-z/tags/git/"},{"name":"Docker","slug":"docker","permalink":"https://github.com/chuchu-z/tags/docker/"}]}