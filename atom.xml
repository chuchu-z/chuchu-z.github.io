<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chuchu-z</title>
  
  
  <link href="http://chuchu-z.com/atom.xml" rel="self"/>
  
  <link href="http://chuchu-z.com/"/>
  <updated>2023-09-20T02:50:30.913Z</updated>
  <id>http://chuchu-z.com/</id>
  
  <author>
    <name>chuchu-z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Install Python3 and OpenSSL</title>
    <link href="http://chuchu-z.com/posts/install-python3/"/>
    <id>http://chuchu-z.com/posts/install-python3/</id>
    <published>2023-07-18T08:31:05.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Install-Python3-and-OpenSSL"><a href="#Install-Python3-and-OpenSSL" class="headerlink" title="Install Python3 and OpenSSL"></a>Install Python3 and OpenSSL</h1><p>因为有个项目要用到 Python 爬取直播间主播和弹幕数据, 所以记录一下安装过程以及途中遇到的问题</p><span id="more"></span><p>先查看当前 Python 版本是2.7的, 后面要重新安装 Python3, 如果还没有安装过后面就更省事了</p><blockquote><p>python –version</p><p>#输出为 Python 2.7.16</p></blockquote><h2 id="OpenSSL-Install"><a href="#OpenSSL-Install" class="headerlink" title="OpenSSL Install"></a>OpenSSL Install</h2><p>#安装py3新版本之前先安装openssl, 否则后面缺少ssl又需要重装， 如果 /usr/local  目录下已经有 openssl 文件夹，先把openssl 改名为 opensslbak 备份, 防止后面出现问题能恢复</p><blockquote><p>cd /usr/local</p><p>mv openssl opensslbak</p><p>wget <a href="https://www.openssl.org/source/openssl-3.0.2.tar.gz">https://www.openssl.org/source/openssl-3.0.2.tar.gz</a> –no-check-certificate</p><p>tar -zxvf openssl-3.0.2.tar.gz</p><p>cd openssl-3.0.2/</p><p> ./Configure –prefix=/usr/local/openssl</p><p>#一般上面命令都会失败报错：Can‘t locate IPC/Cmd.pm in xxx</p><p>yum install -y perl-CPAN</p><p>perl -MCPAN -e shell</p><p>#进入后第一步选yes，第二步选manual，第三步选yes，出现 cpan[1]&gt; 就可以了</p><p>install IPC/Cmd.pm</p><p>#按Ctrl+D退出cpan，重新执行./Configure –prefix=/usr/local/openssl</p><p>./Configure –prefix=/usr/local/openssl</p><p>make &amp;&amp; make install</p><p>cd /usr/local/openssl</p><p>cp -rf /usr/local/openssl/lib64 /usr/local/openssl/lib</p></blockquote><h2 id="Python3-install"><a href="#Python3-install" class="headerlink" title="Python3 install"></a>Python3 install</h2><blockquote><p>cd ~</p><p>wget <a href="https://www.python.org/ftp/python/3.10.11/Python-3.10.11.tgz">https://www.python.org/ftp/python/3.10.11/Python-3.10.11.tgz</a></p><p>tar -zxvf Python-3.10.11.tgz</p><p>cd Python-3.10.11/</p><p>./configure –prefix=/usr/local/python3 –with-openssl=/usr/local/openssl –with-openssl-rpath=auto</p><p>yum update -y</p><p>yum install -y make gcc gcc-c++</p><p>make -j &amp;&amp; make install</p><p>cd /usr/local/bin/</p><p>#把原有的python2改成python.bak</p><p>mv /usr/bin/python /usr/bin/python.bak</p><p>建立软链接</p><p>ln -s /usr/local/bin/python3 /usr/bin/python</p><p>python –version</p><p>#升级python版本之后将由默认的python指向了python3，yum不能正常使用，需要更改2个配置文件</p><p>vim /usr/bin/yum</p><p>vim /usr/libexec/urlgrabber-ext-down</p><p>2个文件都是把开头第一行的 #!/usr/bin/python =&gt;  #!/usr/bin/python2.7</p></blockquote><p>注: 如果遇到了 php 程序正在使用openssl, 新安装的openssl缺少文件导致php那边报错<br>看具体缺少哪个文件, 去原来的 opensslbak 文件夹里复制过来到现有的openssl对应的目录下<br>然后重启一下Nginx和php就行了</p><h2 id="pip-Install"><a href="#pip-Install" class="headerlink" title="pip Install"></a>pip Install</h2><blockquote><p>pip install requests urllib3 pymysql websocket websocket-client mysql-connector-python pytz python-dotenv</p></blockquote><h2 id="USE"><a href="#USE" class="headerlink" title="USE"></a>USE</h2><blockquote><p>python LiveChatCrawler.py</p></blockquote><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. pip is configured with locations that require TLS/SSL<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.pip<span class="token function">vim</span> ~/.pip/pip.conf<span class="token comment"># 修改镜像源为阿里云</span><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host <span class="token operator">=</span> mirrors.aliyun.com</code></pre></blockquote><p>本文参考 <a href="https://blog.csdn.net/Yaphets_dan/article/details/129421953"> CSDN 文章 =&gt; Caused by SSLError(“Can‘t connect to HTTPS URL because the SSL module is not available.“</a></p><p>且在原基础上根据实际情况有所改动</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Install-Python3-and-OpenSSL&quot;&gt;&lt;a href=&quot;#Install-Python3-and-OpenSSL&quot; class=&quot;headerlink&quot; title=&quot;Install Python3 and OpenSSL&quot;&gt;&lt;/a&gt;Install Python3 and OpenSSL&lt;/h1&gt;&lt;p&gt;因为有个项目要用到 Python 爬取直播间主播和弹幕数据, 所以记录一下安装过程以及途中遇到的问题&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://chuchu-z.com/categories/python/"/>
    
    
    <category term="Python" scheme="http://chuchu-z.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>利用 AutoHotKey 实现 win10 多显示器（扩展模式）快速切换</title>
    <link href="http://chuchu-z.com/posts/autohotkey-windows/"/>
    <id>http://chuchu-z.com/posts/autohotkey-windows/</id>
    <published>2023-05-25T09:15:04.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用-AutoHotKey-实现-win10-多显示器（扩展模式）快速切换"><a href="#利用-AutoHotKey-实现-win10-多显示器（扩展模式）快速切换" class="headerlink" title="利用 AutoHotKey 实现 win10 多显示器（扩展模式）快速切换"></a>利用 AutoHotKey 实现 win10 多显示器（扩展模式）快速切换</h1><blockquote><p>在日常办公中我们经常会使用到外接显示屏来辅佐我们 提高办公效率</p><p>然而多显示屏每次切换屏幕都要用鼠标来移动切换, 对鼠标的依赖非常重且非常麻烦😡</p><p>尤其是我左边显示屏是 <strong>IDE</strong> 或者 <strong>shell</strong> 终端, 右边是浏览器</p><p>于是乎在知乎上看到一篇这样的文章👇</p></blockquote><span id="more"></span><h2 id="MoveMouseToMonitor"><a href="#MoveMouseToMonitor" class="headerlink" title="MoveMouseToMonitor"></a>MoveMouseToMonitor</h2><p><a href="https://www.zhihu.com/question/50002939/answer/2482798775">请问win10接双显示器（扩展模式）怎么把鼠标游标切换到第二台显示器上？</a></p><p>看完这篇文章瞬间就觉得它能够完美解决我的问题, 于是乎我安装了答主分享的 <strong>MoveMouseToMonitor.exe</strong> 工具</p><p>然而使用过后似乎仍不能满足我的需求, 因为它仅仅实现了鼠标的光标由 <strong>A显示屏</strong> 👉 <strong>B显示屏</strong> 的移动</p><p>而实际的聚焦效果仍然保留在原来的 <strong>A显示屏</strong> 上</p><p>通俗易懂来讲就是 <strong>鼠标的聚焦</strong> 和 <strong>键盘的聚焦</strong> 是两码事</p><p>这样就导致我的鼠标光标从  <strong>shell</strong> 终端 或者  <strong>IDE</strong> 切换到浏览器后</p><p><strong>输入</strong>键盘时, 实际的<strong>输出</strong>仍然会停留在  <strong>shell</strong> 终端 或者  <strong>IDE</strong> 的上</p><h2 id="MoveMouseToMonitor-V2-0"><a href="#MoveMouseToMonitor-V2-0" class="headerlink" title="MoveMouseToMonitor V2.0"></a>MoveMouseToMonitor V2.0</h2><p>这。。。实现了但没完全实现我想要的效果😂</p><p>于是我就花了亿点点时间研究了下 <strong>AutoHotKey</strong> 的语法和这个<strong>MoveMouseToMonitor.exe</strong> 程序的源代码</p><p>然后再此基础上做了一点点改动,  具体改动为当执行完 <strong>PerformMove</strong> 函数成功移动鼠标后</p><p>创建一个 <strong>ActivateWindowByMousePosition</strong> 函数,  获取当前鼠标位置的窗口 <strong>title</strong></p><p><strong>WinActivate</strong> 会根据鼠标窗口的 <strong>title</strong> 来激活目标窗口, 把键盘的聚焦也切换到该窗口, 从而真正实现切换并激活窗口👍</p><pre class="language-autohotkey" data-language="autohotkey"><code class="language-autohotkey"><span class="token function">PerformMove</span><span class="token punctuation">(</span>MoveMonNum<span class="token punctuation">,</span> OffX<span class="token punctuation">,</span> OffY<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> MoveX<span class="token punctuation">,</span> MoveY    <span class="token command selector">Gosub</span><span class="token punctuation">,</span> CheckNumMonsChanged    RestoreDPI <span class="token operator">:=</span> <span class="token builtin">DllCall</span><span class="token punctuation">(</span><span class="token string">"SetThreadDpiAwarenessContext"</span><span class="token punctuation">,</span> <span class="token string">"ptr"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ptr"</span><span class="token punctuation">)</span>    <span class="token command selector">SysGet</span><span class="token punctuation">,</span> Coordinates<span class="token variable">%MoveMonNum%</span><span class="token punctuation">,</span> Monitor<span class="token punctuation">,</span> <span class="token variable">%MoveMonNum%</span>    <span class="token symbol">Left</span> <span class="token operator">:=</span> Coordinates<span class="token variable">%MoveMonNum%</span><span class="token symbol">Left</span>    <span class="token symbol">Right</span> <span class="token operator">:=</span> Coordinates<span class="token variable">%MoveMonNum%</span><span class="token symbol">Right</span>    <span class="token keyword">Top</span> <span class="token operator">:=</span> Coordinates<span class="token variable">%MoveMonNum%</span><span class="token keyword">Top</span>    Bottom <span class="token operator">:=</span> Coordinates<span class="token variable">%MoveMonNum%</span>Bottom    <span class="token keyword">If</span> <span class="token punctuation">(</span>OffX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        MoveX <span class="token operator">:=</span> <span class="token symbol">Left</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">Floor</span><span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token symbol">Right</span> <span class="token operator">-</span> <span class="token symbol">Left</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">Else</span>        MoveX <span class="token operator">:=</span> <span class="token symbol">Left</span> <span class="token operator">+</span> OffX    <span class="token keyword">If</span> <span class="token punctuation">(</span>OffY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        MoveY <span class="token operator">:=</span> <span class="token keyword">Top</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">Floor</span><span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Bottom <span class="token operator">-</span> <span class="token keyword">Top</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">Else</span>        MoveY <span class="token operator">:=</span> <span class="token keyword">Top</span> <span class="token operator">+</span> OffY    <span class="token builtin">DllCall</span><span class="token punctuation">(</span><span class="token string">"SetCursorPos"</span><span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">,</span> MoveX<span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">,</span> MoveY<span class="token punctuation">)</span>    <span class="token command selector">Sleep</span><span class="token punctuation">,</span> <span class="token number">10</span>    <span class="token builtin">DllCall</span><span class="token punctuation">(</span><span class="token string">"SetCursorPos"</span><span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">,</span> MoveX<span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">,</span> MoveY<span class="token punctuation">)</span>    <span class="token builtin">DllCall</span><span class="token punctuation">(</span><span class="token string">"SetThreadDpiAwarenessContext"</span><span class="token punctuation">,</span> <span class="token string">"ptr"</span><span class="token punctuation">,</span> RestoreDPI<span class="token punctuation">,</span> <span class="token string">"ptr"</span><span class="token punctuation">)</span>    <span class="token command selector">Gosub</span><span class="token punctuation">,</span> ActivateWindowByMousePosition    <span class="token command selector">Return</span><span class="token punctuation">&#125;</span><span class="token tag">ActivateWindowByMousePosition</span><span class="token punctuation">:</span>    <span class="token command selector">MouseGetPos</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token keyword">id</span><span class="token punctuation">,</span> <span class="token command selector">control</span>    <span class="token command selector">WinGetTitle</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> <span class="token keyword">ahk_id</span> <span class="token variable">%id%</span>    <span class="token command selector">WinActivate</span><span class="token punctuation">,</span> <span class="token variable">%title%</span>    <span class="token command selector">Return</span></code></pre><h3 id="Github传送门👇"><a href="#Github传送门👇" class="headerlink" title="Github传送门👇"></a>Github传送门👇</h3><h3 id="https-github-com-chuchu-z-MoveMouseToMonitorV6"><a href="#https-github-com-chuchu-z-MoveMouseToMonitorV6" class="headerlink" title="https://github.com/chuchu-z/MoveMouseToMonitorV6"></a><a href="https://github.com/chuchu-z/MoveMouseToMonitorV6">https://github.com/chuchu-z/MoveMouseToMonitorV6</a></h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;利用-AutoHotKey-实现-win10-多显示器（扩展模式）快速切换&quot;&gt;&lt;a href=&quot;#利用-AutoHotKey-实现-win10-多显示器（扩展模式）快速切换&quot; class=&quot;headerlink&quot; title=&quot;利用 AutoHotKey 实现 win10 多显示器（扩展模式）快速切换&quot;&gt;&lt;/a&gt;利用 AutoHotKey 实现 win10 多显示器（扩展模式）快速切换&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在日常办公中我们经常会使用到外接显示屏来辅佐我们 提高办公效率&lt;/p&gt;
&lt;p&gt;然而多显示屏每次切换屏幕都要用鼠标来移动切换, 对鼠标的依赖非常重且非常麻烦😡&lt;/p&gt;
&lt;p&gt;尤其是我左边显示屏是 &lt;strong&gt;IDE&lt;/strong&gt; 或者 &lt;strong&gt;shell&lt;/strong&gt; 终端, 右边是浏览器&lt;/p&gt;
&lt;p&gt;于是乎在知乎上看到一篇这样的文章👇&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Other" scheme="http://chuchu-z.com/categories/other/"/>
    
    
    <category term="Other" scheme="http://chuchu-z.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Blog Docker搭建本地环境与持续集成</title>
    <link href="http://chuchu-z.com/posts/hexo-blog-build/"/>
    <id>http://chuchu-z.com/posts/hexo-blog-build/</id>
    <published>2023-05-22T09:59:58.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Blog-indigo-hexo6"><a href="#Hexo-Blog-indigo-hexo6" class="headerlink" title="Hexo-Blog (indigo-hexo6)"></a>Hexo-Blog (indigo-hexo6)</h1><p>该博客使用了 <a href="https://docs.github.com/zh/pages/quickstart">GitHub Pages</a> +  <a href="https://hexo.io/zh-cn/">Hexo</a>  + <a href="https://github.com/chuchu-z/hexo-theme-indigo">indigo-hexo6 主题</a> 搭建</p><p><code>GitHub Pages</code> 允许我们 创建以自己用户名开头的<code>username.github.io</code>仓库用来搭建自己的静态页面网站或者博客</p><p>而 <code>Hexo</code> 本身就是一款支持 Markdown 静态化博客框架 有多种主题可供选择 并且上手简单 刚好契合我的需求</p><span id="more"></span><p>另外为了解决平时在写好文章想先本地预览</p><p>但是又不在自己电脑旁边或者使用公司电脑的时候要重新安装部署一遍 <code>nodejs </code> 和 <code>hexo</code> 这些东西</p><p>所以增加了<code>docker</code>来解决环境的问题</p><p>使用 <code>Dockerfile</code> + <code>docker-compose</code> 文件</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:14 <span class="token keyword">AS</span> builder</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span><span class="token instruction"><span class="token keyword">COPY</span> . .</span><span class="token instruction"><span class="token keyword">RUN</span> npm install --no-fund &amp;&amp; npx hexo clean &amp;&amp; npx hexo generate</span><span class="token instruction"><span class="token keyword">FROM</span> nginx:alpine</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/share/nginx/html</span><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/public /usr/share/nginx/html</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span></code></pre><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><pre class="language-none"><code class="language-none">version: &#39;3&#39;services:  hexo:    build:      context: .      dockerfile: Dockerfile    image: chuchuzz426&#x2F;blog-hexo:1.0    ports:      - &quot;80:80&quot;</code></pre><p>如此 <code>git clone</code> 下来的时候 能立马部署出一套本地环境</p><p>使用简单, 开袋即食😋</p><pre class="language-none"><code class="language-none"># 拉取src分支源码git clone -b src git@github.com:chuchu-z&#x2F;chuchu-z.github.io.git# 在项目目录执行docker-compose up -d</code></pre><h3 id="然后就可以打开-http-localhost-预览啦✨"><a href="#然后就可以打开-http-localhost-预览啦✨" class="headerlink" title="然后就可以打开 http://localhost/ 预览啦✨"></a>然后就可以打开 <a href="http://localhost/">http://localhost/</a> 预览啦✨</h3><h1 id="持续集成自动部署"><a href="#持续集成自动部署" class="headerlink" title="持续集成自动部署"></a>持续集成自动部署</h1><p>为了发布文章<code>push</code> 到 <code>src</code> 分支后能自动更新到博客, 使用了 <code>GitHub Actions</code> 来实现自动部署</p><p>通过使用 <code>GitHub Actions</code>，我们可以实现自动化的软件开发流程，提高开发效率和代码质量</p><p>它还可以帮助团队协同工作，确保代码的集成和部署过程更加可靠和一致</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Action 的名字</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Auto Deploy<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token comment"># 触发条件1：src 分支收到 push 后执行任务。</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> src  <span class="token comment"># 触发条件2：手动按钮</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span><span class="token comment"># 这里放环境变量,需要替换成你自己的</span><span class="token key atrule">env</span><span class="token punctuation">:</span>  <span class="token comment"># Hexo 编译后使用此 git 用户部署到 github 仓库</span>  <span class="token key atrule">GIT_USER</span><span class="token punctuation">:</span> chuchu<span class="token punctuation">-</span>z  <span class="token comment"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span>  <span class="token key atrule">GIT_EMAIL</span><span class="token punctuation">:</span> chuchuzz426@gmail.com  <span class="token comment"># Hexo 编译后要部署的 github 仓库</span>  <span class="token key atrule">GIT_DEPLOY_REPO</span><span class="token punctuation">:</span> chuchu<span class="token punctuation">-</span>z/chuchu<span class="token punctuation">-</span>z.github.io  <span class="token comment"># Hexo 编译后要部署到的分支</span>  <span class="token key atrule">GIT_DEPLOY_BRANCH</span><span class="token punctuation">:</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build on node $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> and $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">if</span><span class="token punctuation">:</span> github.event.repository.owner.id == github.event.sender.id    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">]</span>        <span class="token key atrule">node_version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout deploy repo        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_DEPLOY_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_DEPLOY_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> .deploy_git      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configuration environment        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRI</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>secrets.HEXO_DEPLOY_PRI<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          sudo timedatectl set-timezone "Asia/Shanghai"          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRI" > ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts          # coding 已取消同步          ssh-keyscan -t rsa e.coding.net >> ~/.ssh/known_hosts          ssh-keyscan -t rsa gitee.com >> ~/.ssh/known_hosts          git config --global user.name $GIT_USER          git config --global user.email $GIT_EMAIL</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>fund      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy hexo        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm run deploy</span></code></pre><p>触发条件为每当有<code>push</code> 代码的时候将自动按照<code>.github/workflows/deploy.yml</code>下的配置文件构造部署环境</p><p>相当于帮我们执行了 <code>hexo generate</code> 和 <code>hexo deploy</code> 然后<code>hexo deploy</code>会根据项目根目录下的<code>_config.yml</code>配置文件</p><p>把编译好的静态文件更新到以自己用户名开头的<code>username.github.io</code>仓库的 <code>master</code> 分支上</p><p>这样就完成了自动化部署啦</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token comment"># repo: git@github.com:chuchu-z/chuchu-z.github.io.git #构建机器上没有配置 ssh 免密,所以使用https</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github_token@github.com/chuchu<span class="token punctuation">-</span>z/chuchu<span class="token punctuation">-</span>z.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master  <span class="token key atrule">message</span><span class="token punctuation">:</span> GitHub Actions 自动部署<span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> now('YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss') <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="👉-博客地址-http-chuchu-z-com"><a href="#👉-博客地址-http-chuchu-z-com" class="headerlink" title="👉 博客地址: http://chuchu-z.com"></a>👉 博客地址: <a href="http://chuchu-z.com/">http://chuchu-z.com</a></h2><h2 id="👉-GitHub地址-https-github-com-chuchu-z-chuchu-z-github-io"><a href="#👉-GitHub地址-https-github-com-chuchu-z-chuchu-z-github-io" class="headerlink" title="👉 GitHub地址: https://github.com/chuchu-z/chuchu-z.github.io"></a>👉 GitHub地址: <a href="https://github.com/chuchu-z/chuchu-z.github.io">https://github.com/chuchu-z/chuchu-z.github.io</a></h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Hexo-Blog-indigo-hexo6&quot;&gt;&lt;a href=&quot;#Hexo-Blog-indigo-hexo6&quot; class=&quot;headerlink&quot; title=&quot;Hexo-Blog (indigo-hexo6)&quot;&gt;&lt;/a&gt;Hexo-Blog (indigo-hexo6)&lt;/h1&gt;&lt;p&gt;该博客使用了 &lt;a href=&quot;https://docs.github.com/zh/pages/quickstart&quot;&gt;GitHub Pages&lt;/a&gt; +  &lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt;  + &lt;a href=&quot;https://github.com/chuchu-z/hexo-theme-indigo&quot;&gt;indigo-hexo6 主题&lt;/a&gt; 搭建&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GitHub Pages&lt;/code&gt; 允许我们 创建以自己用户名开头的&lt;code&gt;username.github.io&lt;/code&gt;仓库用来搭建自己的静态页面网站或者博客&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;Hexo&lt;/code&gt; 本身就是一款支持 Markdown 静态化博客框架 有多种主题可供选择 并且上手简单 刚好契合我的需求&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://chuchu-z.com/categories/docker/"/>
    
    <category term="Hexo" scheme="http://chuchu-z.com/categories/docker/hexo/"/>
    
    
    <category term="Docker" scheme="http://chuchu-z.com/tags/docker/"/>
    
    <category term="Hexo" scheme="http://chuchu-z.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[教程] Android Webview 开发(App内嵌web)</title>
    <link href="http://chuchu-z.com/posts/android-webview-develop/"/>
    <id>http://chuchu-z.com/posts/android-webview-develop/</id>
    <published>2023-05-16T11:31:05.000Z</published>
    <updated>2023-09-20T02:50:30.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教程-Android-Webview-开发-App内嵌web"><a href="#教程-Android-Webview-开发-App内嵌web" class="headerlink" title="[教程] Android Webview 开发(App内嵌web)"></a>[教程] Android Webview 开发(App内嵌web)</h1><blockquote><p>自己花了2周的时间慢慢摸索出来的一点点经验, 网上教程很多, 但更多的是搬运或者年份比较久远的了, 借着着ChatGPT和网上的方法总算把项目搞定了, 打算把从开发到上架Google Play的全流程记录下来方便回顾总结, 同时希望对大家有一点点帮助。</p><span id="more"></span><p>另外安装 Android studio 教程就不出了, 实在是不想卸载了重新安装一遍, 需要安装教程的伙伴们可以参考知乎这位大佬写的教程 <a href="https://zhuanlan.zhihu.com/p/528196912">全网最全最细Android Studio 安装和使用教程</a> , 不过这个教程的第三步, &lt;SDK的安装&gt; 建议跳过, 直接看第四步 &lt;Android模拟器的下载&gt; , 因为现在新版本 Android studio 里面已经集成SDK安装了, 不需要去单独下载, 可能是这位大佬当时是旧版本还没有集成到。</p></blockquote><h2 id="一-创建项目"><a href="#一-创建项目" class="headerlink" title="一. 创建项目"></a>一. 创建项目</h2><p>选择 <code>Empty Activity</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/image-20230513175557001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="1-Package-name"><a href="#1-Package-name" class="headerlink" title="1. Package name"></a>1. Package name</h3><p>Package name 尽量不要使用默认的  <code>com.example</code> 开头, 起个正经点的名字, 特别是如果后续想要打包发布到 <code>google paly</code> 上面的, <code>com.example</code> 开头是不会通过的, 到时候还得代码里各种改一遍包名, 然后还可能会有莫名其妙的缓存问题因为包名改了导致各种报错, 算是一个小小的坑, 尽量一开始定好就不要改动。</p><h3 id="2-Minimum-SDK"><a href="#2-Minimum-SDK" class="headerlink" title="2. Minimum SDK"></a>2. Minimum SDK</h3><p>关于SDK的选择, 尽量选择稍微低版本的SDK, 这样能支持的设备就更多一些, 如果是个人项目练习的可以随意, 如果公司项目的话尽量选择能支持多设备的, 一般能支持95%以上差不多可以了, 具体看公司要求, 本人这里选择的是API 28。</p><h3 id="3-Build-language"><a href="#3-Build-language" class="headerlink" title="3. Build language"></a>3. Build language</h3><p>构建语言选择, Kotlin 是 Android 开发的推荐语言，它提供了现代化的语言特性、更好的性能和良好的工具支持。而 Groovy 在 Android 开发中的使用相对较少，主要适用于特定场景或个人喜好。选择哪种语言取决于个人偏好、项目需求和团队情况 。本人推荐选择<code>Kotlin</code>, 选择完点击 <code>Finish</code> ,会自动进行项目初始化,耐心等待一会就好了 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/image-20230515114344763.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="二-目录结构及重要文件"><a href="#二-目录结构及重要文件" class="headerlink" title="二. 目录结构及重要文件"></a>二. 目录结构及重要文件</h2><p>初始化好后, 可以点击左上角切换项目以什么形式展开, <code>Project</code>形式能更详细看到每个文件和目录,  <code>Android</code>形式会简化很多不必要的文件夹,看起来更加简洁舒适 。目录结构介绍较长, 着急下一步安装的可以直接跳到第三步 <a href="#sdk">SDK安装</a> ,  后续再回来看结构介绍。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/project.gif" alt title>                </div>                <div class="image-caption"></div>            </figure><p>WebView 项目通常遵循以下目录结构：</p><pre class="language-prel" data-language="prel"><code class="language-prel">- app&#x2F;  |- src&#x2F;  |  |- main&#x2F;  |     |- java&#x2F;  |     |  |- com.example.app&#x2F;           # 应用的代码  |     |  |  |- MainActivity.java       # 主Activity文件  |     |  |     |- res&#x2F;  |     |  |- layout&#x2F;                    # 布局文件  |     |  |  |- activity_main.xml  |     |  |  |     |  |- values&#x2F;                    # 值资源文件  |     |  |  |- strings.xml # 字符串资源文件  |     |  |     |- AndroidManifest.xml   # 应用程序清单文件  |  |     |- assets&#x2F;                        # WebView使用的本地资源  |     |  |- index.html                  # WebView入口HTML文件  |     |  |- css&#x2F;                        # CSS样式文件  |     |  |- js&#x2F;                         # JavaScript脚本文件  |     |  |- images&#x2F;                     # 图片文件  |     |- ...  |- build.gradle.kts                     # 项目的Gradle构建配置文件  |- ...</code></pre><h3 id="1-com-example-app"><a href="#1-com-example-app" class="headerlink" title="1. com.example.app"></a>1. com.example.app</h3><p>我们一般情况主要开发都是在<code>com.example.app</code>下面进行的, 主要代码基本都在这里, 这里说明一下, 如果是新版本的<code>Android studio</code>初始化的时候, 默认是使用<code>Kotlin</code> 语言进行开发的,  所以主Activity文件会是 <code>MainActivity.kt</code>而不是 <code>MainActivity.java</code>,  不管是<code>Kotlin</code>还是<code>Java</code>, 选择哪个作为应用的开发语言都可以的,  而且这两个语言是可以相互转换的, 用<code>Java</code>的话可以删掉<code>MainActivity.kt</code>, 自己新建  <code>MainActivity.java</code>。</p><blockquote><p>Kotlin 是一种现代的、静态类型的编程语言，与 Java 语言可以在 Android 开发中无缝集成。它提供了更简洁、安全、表达力强的语法，并具有许多特性和功能，可帮助开发者更高效地编写 Android 应用程序。</p></blockquote><h3 id="2-AndroidManifest-xml"><a href="#2-AndroidManifest-xml" class="headerlink" title="2. AndroidManifest.xml"></a>2. AndroidManifest.xml</h3><p><span style="color: #bf1d2c;"><strong>重要: <code>AndroidManifest.xml</code> 是 Android 应用程序的 核心配置文件，它描述了应用程序的基本信息、组件、权限和行为等。在开发 Android 应用程序时，清单文件的正确配置和使用非常重要，它直接影响应用程序的功能和行为。</strong></span></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 权限声明：通过 &lt;uses-permission> 元素，你可以声明应用程序需要的权限。Android 操作系统会在安装应用程序时向用户展示所请求的权限，并在用户同意后授予应用程序相应的权限。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.ACCESS_NETWORK_STATE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.ACCESS_WIFI_STATE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- &lt;application> 元素用于定义应用程序的全局配置和属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>dataExtractionRules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@xml/data_extraction_rules<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fullBackupContent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@xml/backup_rules<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.MyWebview<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>targetApi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>31<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- &lt;activity> 元素用于声明应用程序的活动（Activity）。每个活动都需要在清单文件中进行声明，以便在应用程序中使用android:name: 指定活动的类名(默认MainActivity.java)android:theme：指定活动的主题样式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.MyWebview<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token comment">&lt;!--  用于指定一个活动（Activity）作为应用程序打开时的主要入口点, 不可有多个, 多个的话安装app时桌面会出现多个应用图标  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><h3 id="3-res-目录"><a href="#3-res-目录" class="headerlink" title="3. res/ 目录"></a>3. res/ 目录</h3><p>在 Android 项目中的 <code>res/</code> 目录是用于存放资源文件的目录，其中包含了应用程序所需的各种资源，如布局文件、字符串、图像、颜色、样式等。这个目录是在 Android 项目创建时自动生成的，用于组织和管理应用程序的静态资源，在这些目录中，我们可以根据资源的类型和用途将相应的文件放置在相应的目录中，以便在代码中引用和使用这些资源。</p><p><code>res/</code> 目录通常包含以下子目录：</p><pre class="language-none"><code class="language-none">- res&#x2F;  |- layout&#x2F;# 用于存放布局文件，定义了应用程序的用户界面的组件和布局结构。  |- drawable&#x2F;# 用于存放图像资源文件，如位图文件（.png、.jpg、.gif 等）或矢量图形文件（.xml）。  |- mipmap&#x2F;# 用于存放应用程序图标的不同分辨率版本。通常包括 &#96;mdpi&#96;、&#96;hdpi&#96;、&#96;xhdpi&#96;、&#96;xxhdpi&#96;、&#96;xxxhdpi&#96; 等不同密度的图标文件。  |- values&#x2F;# 用于存放资源值文件，如字符串、颜色、尺寸、样式等。包括 &#96;strings.xml&#96;、&#96;colors.xml&#96;、&#96;dimens.xml&#96;、&#96;styles.xml&#96;。  |- raw&#x2F;    # 用于存放原始资源文件，如音频文件、视频文件、字体文件等。这些文件可以直接通过资源 ID 访问。  |- menu&#x2F;  # 用于存放菜单资源文件，定义应用程序的菜单结构。  |- xml&#x2F;   # 用于存放其他 XML 文件，如自定义视图、插件配置文件等。</code></pre><h3 id="4-build-gradle"><a href="#4-build-gradle" class="headerlink" title="4. build.gradle"></a>4. build.gradle</h3><p><code>build.gradle.kts</code> 是使用 Kotlin 脚本语言编写的 Android 项目的构建脚本文件，用于配置和管理项目的构建过程。如果一开始创建项目时选的是Groovy, 那么生成的就是 <code>build.gradle</code> 文件，两者相比, <code>build.gradle.kts</code> 提供了使用 Kotlin 语言进行更灵活、类型安全和可编程的构建配置。</p><p>在 <code>build.gradle.kts</code> 文件中，我们可以定义项目的依赖关系、插件应用、构建类型、任务配置等。</p><p><code>build.gradle.kts</code> 文件的基本结构：</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 构建脚本的基本信息和配置</span>plugins <span class="token punctuation">&#123;</span>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.application"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"7.0.0"</span></span>    <span class="token comment">// 其他插件的应用</span><span class="token punctuation">&#125;</span>android <span class="token punctuation">&#123;</span>    <span class="token comment">// Android 构建的配置</span>    compileSdk <span class="token operator">=</span> <span class="token number">33</span> <span class="token comment">//应用程序的编译目标版本</span>    defaultConfig <span class="token punctuation">&#123;</span>        applicationId <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"com.example.myapp"</span></span>        minSdk <span class="token operator">=</span> <span class="token number">28</span>   <span class="token comment">//最低支持的 Android 版本</span>        targetSdk <span class="token operator">=</span> <span class="token number">33</span> <span class="token comment">//目标设备的 Android 版本</span>        versionCode <span class="token operator">=</span> <span class="token number">1</span>        versionName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"1.0"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 其他 Android 构建配置</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    <span class="token comment">// 依赖关系配置</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.support:appcompat-v7:28.0.0"</span></span><span class="token punctuation">)</span>    <span class="token comment">// 其他依赖项</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义任务配置</span>tasks <span class="token punctuation">&#123;</span>     <span class="token comment">// 自定义任务的配置</span>    <span class="token keyword">val</span> myTask <span class="token keyword">by</span> registering <span class="token punctuation">&#123;</span>        <span class="token comment">// 任务的配置</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 其他任务配置</span><span class="token punctuation">&#125;</span></code></pre><h2 id="三-SDK安装"><a href="#三-SDK安装" class="headerlink" title="三. SDK安装"></a><a name="sdk" style="color: inherit;">三. SDK安装</a></h2><h3 id="1-SDK目录"><a href="#1-SDK目录" class="headerlink" title="1. SDK目录"></a>1. SDK目录</h3><p>在 Android 开发中，SDK Platforms 是用于开发和构建 Android 应用程序所需的 Android 平台版本。安装 SDK Platforms 是为了能够编译和运行应用程序的目标 Android 版本。例如，如果你开发的应用程序目标版本是 Android 10（API 级别 29），你应该选择安装对应的 Android 10 SDK Platforms。</p><p> 建议目录结构如下, 管理起来方便一些:</p><pre class="language-none"><code class="language-none">- d&#x2F;  |- Android&#x2F;      |- Projects# 项目目录,所有开发的项目可以放到此目录下      |- SDK# SDK目录      |- Studio# Android Studio 安装目录</code></pre><h3 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2. 环境变量配置"></a>2. 环境变量配置</h3><p>点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 新建系统变量</p><pre class="language-none"><code class="language-none">创建2个系统变量ANDROID_SDK_ROOT &#x3D;&gt;  D:\Android\SDKANDROID_ADB &#x3D;&gt;  D:\Android\SDK\platform-tools</code></pre><p><img src="/posts/android-webview-develop/image-20230515192521267.png"></p><pre class="language-none"><code class="language-none">把刚创建的系统变量添加到Path变量中%ANDROID_SDK_ROOT%%ANDROID_ADB%</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/image-20230515192620190.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="3-SDK安装"><a href="#3-SDK安装" class="headerlink" title="3. SDK安装"></a>3. SDK安装</h3><p>点击左上角的 File -&gt; Settings -&gt; System Settings -&gt; Android SDK, 安装目录可以像我这样,  如果我们的应用要在Android 10 运行就找到 Android 10 勾选上, 如果你的应用还要在其他Android版本上运行, 也可以把其他版本安装一下, 选完后点击<code>Apply</code> 耐心等待安装完成即可。</p><blockquote><p>注意: 后面安装虚拟设备的时候也是在SDK的基础上安装的</p><p>举例: 如果你没有安装Android 13的SDK, 那也没有办法安装和使用Android 13的虚拟设备, 另外安装虚拟设备时有的可能还需要用到 Google APIs 镜像的, 可以点击右下角的 Show Package Details 查看, 根据虚拟设备所需要的Google APIs 来勾选安装。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/image-20230515183023944.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="4-SDK-Tools-安装"><a href="#4-SDK-Tools-安装" class="headerlink" title="4. SDK Tools 安装"></a>4. SDK Tools 安装</h3><ol><li>Android SDK Build-Tools：构建和编译Android应用程序所必需的工具集，包括编译器、调试器和其他构建工具。</li><li>Android SDK Platform-Tools：这是与Android设备通信、调试和管理的一组工具，如adb（Android Debug Bridge）、fastboot等。</li><li>Android Emulator：模拟Android设备的工具，用于在开发计算机上运行和测试Android应用程序。</li><li>Android Emulator Hypervisor Driver 和 Intelx6 Emulator Accelerator(HAXM installer) 都是加速 Android 模拟器用于提高 Android 模拟器性能的组件。</li><li>其他的非必选 各位实际项目需求来, 另外可能Android Studio版本不同, 下图的工具名称可能也有所不同甚至没有这个工具换成其他的替代了。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/image-20230516103348480.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="四-虚拟设备安装"><a href="#四-虚拟设备安装" class="headerlink" title="四. 虚拟设备安装"></a>四. 虚拟设备安装</h2><h3 id="1-选择安装镜像"><a href="#1-选择安装镜像" class="headerlink" title="1. 选择安装镜像"></a>1. 选择安装镜像</h3><p>点击右上角的 <code>Device Manager</code>(手机机器人图标)  -&gt; Create Device (创建设备) , 在 <code>phone</code> 这一栏选择一个符合你要求的, 然后点击 <code>NEXT</code> 进入到具体得镜像选择,</p><p>选择好后继续点<code>NEXT</code>后再点击<code>Finish</code>等待安装完成就可以了</p><p>前面安装SDK时说过, 创建虚拟设备跟我们安装的SDK还有镜像有关, 在这里选择镜像的时候有的选项就会置灰不可选择, 因为你没有安装该虚拟设备所需要的Android SDK版本或者 镜像 </p><p><img src="/posts/android-webview-develop/create_device.gif"></p><h3 id="2-启动虚拟设备"><a href="#2-启动虚拟设备" class="headerlink" title="2. 启动虚拟设备"></a>2. 启动虚拟设备</h3><p>安装好之后, 如下图, 点击 <code>Actions</code> 即可启动虚拟设备</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/start_device.gif" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="五-启动项目"><a href="#五-启动项目" class="headerlink" title="五. 启动项目"></a>五. 启动项目</h2><p>经过前面的铺垫, 现在终于可以进入开发阶段了, 如果前面一切顺利的话, 现在只需要点击一下右上角的<code>Run app</code> , 项目就会运行起来, 然后就可以在虚拟设备的界面上看到<code>Hello Android!</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/android-webview-develop/run_app.gif" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;教程-Android-Webview-开发-App内嵌web&quot;&gt;&lt;a href=&quot;#教程-Android-Webview-开发-App内嵌web&quot; class=&quot;headerlink&quot; title=&quot;[教程] Android Webview 开发(App内嵌web)&quot;&gt;&lt;/a&gt;[教程] Android Webview 开发(App内嵌web)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;自己花了2周的时间慢慢摸索出来的一点点经验, 网上教程很多, 但更多的是搬运或者年份比较久远的了, 借着着ChatGPT和网上的方法总算把项目搞定了, 打算把从开发到上架Google Play的全流程记录下来方便回顾总结, 同时希望对大家有一点点帮助。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android" scheme="http://chuchu-z.com/categories/android/"/>
    
    
    <category term="Android" scheme="http://chuchu-z.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>浅记冒泡排序及斐波那契数列优化点</title>
    <link href="http://chuchu-z.com/posts/bubble-sort-and-fibonacci/"/>
    <id>http://chuchu-z.com/posts/bubble-sort-and-fibonacci/</id>
    <published>2023-02-16T11:04:13.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>一般的冒泡排序只能满足最基本的要求, 如果不加以优化, 还会多做无用功, 出现重复循环的无效排序。</p></blockquote><span id="more"></span><h4 id="常规冒泡排序"><a href="#常规冒泡排序" class="headerlink" title="常规冒泡排序**"></a>常规冒泡排序**</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><h4 id="优化点1"><a href="#优化点1" class="headerlink" title="优化点1"></a>优化点1</h4><blockquote><p>如  <strong>[1,2,3,5,4 ]</strong>  , 只需要排序一遍的, 我们可以增加标识位表示当前是有序或无序,已经是有序的情况可直接退出循环。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//排序下限</span><span class="token variable">$maxIndex</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//排序上限</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//定义标识位标记已经有序或无序</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">;</span>            <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 优化1,无排序即完成,可退出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><h4 id="优化点2"><a href="#优化点2" class="headerlink" title="优化点2"></a>优化点2</h4><blockquote><p>当一个数组接近有序的时候, 只需要在某一个小范围内排序即可, 如  <strong>[1, 7,5,3,9,11,12,13,14]</strong>  ,</p><p>在11后面都已经是有序的情况, 11后面的无需再排序, 可以使用标记来表示这个范围的下限, 只排序到此下标位置即可。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//排序下限</span><span class="token variable">$maxIndex</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//排序上限</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//定义标识位标记已经有序或无序</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$index</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">;</span>            <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$maxIndex</span> <span class="token operator">=</span> <span class="token variable">$j</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 优化1,无排序即完成,可退出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 优化2     * 当一个数组接近有序的时候     * 只需要在某一个小范围内排序即可     * 使用标记来表示这个范围的下限     * 只排序到此下标位置即可     */</span>    <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$maxIndex</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><h4 id="斐波那契数列递归"><a href="#斐波那契数列递归" class="headerlink" title="斐波那契数列递归"></a>斐波那契数列递归</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">fibonacci</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 经过测试, 使用该方法当计算数值达到30以上运算会肉眼可见的明显变慢</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><h4 id="递归优化"><a href="#递归优化" class="headerlink" title="递归优化"></a>递归优化</h4><blockquote><p>从上面的递归方法可以看到，进行了很多的重复计算，性能极差，N越大，计算的次数越多，既然因为重复计算影响了性能，那么优化就从减少重复计算入手，即把之前计算的存储起来，这样就避免了过多的重复计算，优化了递归算法(但仍然不推荐使用递归)。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">fibonacci_2</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">// 存储前一位，优化递归计算</span>        <span class="token keyword">return</span> <span class="token function">fibonacci_2</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 优化后500内的计算0.2090780735s内可算出来</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">fibonacci_2</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><h4 id="非递归写法-记忆化自底向上"><a href="#非递归写法-记忆化自底向上" class="headerlink" title="非递归写法(记忆化自底向上)"></a>非递归写法(记忆化自底向上)</h4><blockquote><p>自底向上计算, 把结果存储到数组中, 避免重复计算。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">fibonacci_3</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 返回最后一个数，即第N个数</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">fibonacci_3</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><blockquote><p>进一步优化, 没必要将结果存储到一个数组, 利用动态规划思想, 定义临时变量解决。</p><p>动态规划的思想是，记录中间计算结果，计算后面时，根据前面保存的结果直接计算，避免重复计算且减少存储空间占用。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">fibonacci_4</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token operator">-</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">fibonacci_4</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一般的冒泡排序只能满足最基本的要求, 如果不加以优化, 还会多做无用功, 出现重复循环的无效排序。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://chuchu-z.com/categories/php/"/>
    
    <category term="算法" scheme="http://chuchu-z.com/categories/php/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="PHP" scheme="http://chuchu-z.com/tags/php/"/>
    
    <category term="算法" scheme="http://chuchu-z.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions实现Hexo自动化部署</title>
    <link href="http://chuchu-z.com/posts/hexo-blog-git-actions/"/>
    <id>http://chuchu-z.com/posts/hexo-blog-git-actions/</id>
    <published>2023-02-13T21:24:23.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Actions实现Hexo自动化部署"><a href="#GitHub-Actions实现Hexo自动化部署" class="headerlink" title="GitHub Actions实现Hexo自动化部署"></a>GitHub Actions实现Hexo自动化部署</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于半夜睡不着，突然想到博客很久没有更新了， 准备把很久之前写好的文章发布一下，但是发现原来使用的 <strong>travis-ci</strong> 没有触发， 去查了一下才知道 <a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing">Travis CI 在 2020年 11 月 2 日就改变了收费策略</a> ，原来我现在用的免费方案，系统会赠送 10000 积分（一次性）。</p><span id="more"></span><p>Linux 机器上每分钟消耗 10 积分，macOS 机器上每分钟消耗 50 积分，我的积分已经消耗完了。一开始我觉得比较诧异，因为我以前从来没关注有这个积分机制，以为公共仓库使用 Travis CI 服务都是免费的。被迫无奈，本来只是想发个文章，变成了连夜更换CI/CD，中途还发现域名快到期了顺便续了一年😥。</p></blockquote><h2 id="Hexo-持续集成"><a href="#Hexo-持续集成" class="headerlink" title="Hexo 持续集成"></a>Hexo 持续集成</h2><p>由于本人是通过<strong>GitHub Pages</strong>方式来实现博客托管的，好处是不需要自己购买服务器和域名， 只需要在github上创建一个repository，这个repository的名字还有要求必须是<strong>username.github.io</strong>，再随便写个静态html内容上传就可以直接访问了，具体方法这里不再多说。</p><p>先简单介绍一下项目仓库，源代码和hexo编译后的静态资源都在同一仓库（<strong>chuchu-z.github.io</strong>）， 只是分支不同，src分支为源代码仓库， master分支为hexo编译后的静态资源， 也就是博客展示出来的内容。</p><h3 id="生成公钥私钥"><a href="#生成公钥私钥" class="headerlink" title="生成公钥私钥"></a>生成公钥私钥</h3><pre class="language-none"><code class="language-none">ssh-keygen -t rsa  -C &quot;$(git config user.name)&quot; -f github-deploy-key</code></pre><h3 id="添加仓库环境变量"><a href="#添加仓库环境变量" class="headerlink" title="添加仓库环境变量"></a>添加仓库环境变量</h3><p>设置 HEXO_DEPLOY_PUB，value 是上步生成的 github-deploy-key.pub 文件内容。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/hexo-blog-git-actions/image-20230214054920822.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>设置 HEXO_DEPLOY_PRI，value 是上步生成的 github-deploy-key 文件内容。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/hexo-blog-git-actions/image-20230214055043562.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="编写配置文件deploy-yml"><a href="#编写配置文件deploy-yml" class="headerlink" title="编写配置文件deploy.yml"></a>编写配置文件deploy.yml</h3><p>在 <code>myblog</code> 项目根目录下创建 <code>.github/workflows/deploy.yml</code> 文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Action 的名字</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Auto Deploy<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token comment"># 触发条件1：src 分支收到 push 后执行任务。</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> src  <span class="token comment"># 触发条件2：手动按钮</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span><span class="token comment"># 这里放环境变量,需要替换成你自己的</span><span class="token key atrule">env</span><span class="token punctuation">:</span>  <span class="token comment"># Hexo 编译后使用此 git 用户部署到 github 仓库</span>  <span class="token key atrule">GIT_USER</span><span class="token punctuation">:</span> chuchu<span class="token punctuation">-</span>z  <span class="token comment"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span>  <span class="token key atrule">GIT_EMAIL</span><span class="token punctuation">:</span> 1813713320@qq.com  <span class="token comment"># Hexo 编译后要部署的 github 仓库</span>  <span class="token key atrule">GIT_DEPLOY_REPO</span><span class="token punctuation">:</span> chuchu<span class="token punctuation">-</span>z/chuchu<span class="token punctuation">-</span>z.github.io  <span class="token comment"># Hexo 编译后要部署到的分支</span>  <span class="token key atrule">GIT_DEPLOY_BRANCH</span><span class="token punctuation">:</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build on node $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> and $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 配置运行的机器环境</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">if</span><span class="token punctuation">:</span> github.event.repository.owner.id == github.event.sender.id    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">]</span>        <span class="token key atrule">node_version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token comment"># 执行步骤</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout deploy repo        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_DEPLOY_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.GIT_DEPLOY_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> .deploy_git      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 授权密钥</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configuration environment        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRI</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>secrets.HEXO_DEPLOY_PRI<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          sudo timedatectl set-timezone "Asia/Shanghai"          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRI" > ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts          # coding 已取消同步          ssh-keyscan -t rsa e.coding.net >> ~/.ssh/known_hosts          ssh-keyscan -t rsa gitee.com >> ~/.ssh/known_hosts          git config --global user.name $GIT_USER          git config --global user.email $GIT_EMAIL</span><span class="token comment"># 安装并执行hexo</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install -g hexo-cli --no-fund          npm install -g --no-fund          hexo clean          hexo generate</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy hexo        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm run deploy</span></code></pre><p>把配置文件提交到github仓库之后， 只要src（源代码）分支触发push操作，就会自动触发部署，在Actions就可以看到具体部署情况。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在学习了网上其他大佬们的方法后自己稍微做了些修改，也是总算成功完成了，感觉这次处理起来比上次使用<code>travis-ci</code>简单快的多，也可能是之前踩过不少坑了，这次比较顺利，早知道<code>GitHub Actions</code>这么方便就不用<code>travis-ci</code>了， 不过要不是<code>travis-ci</code>收费了我现在也还不知道<code>GitHub Actions</code>也挺好用，刚好天亮了睡觉😴。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GitHub-Actions实现Hexo自动化部署&quot;&gt;&lt;a href=&quot;#GitHub-Actions实现Hexo自动化部署&quot; class=&quot;headerlink&quot; title=&quot;GitHub Actions实现Hexo自动化部署&quot;&gt;&lt;/a&gt;GitHub Actions实现Hexo自动化部署&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于半夜睡不着，突然想到博客很久没有更新了， 准备把很久之前写好的文章发布一下，但是发现原来使用的 &lt;strong&gt;travis-ci&lt;/strong&gt; 没有触发， 去查了一下才知道 &lt;a href=&quot;https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing&quot;&gt;Travis CI 在 2020年 11 月 2 日就改变了收费策略&lt;/a&gt; ，原来我现在用的免费方案，系统会赠送 10000 积分（一次性）。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://chuchu-z.com/categories/hexo/"/>
    
    
    <category term="Hexo" scheme="http://chuchu-z.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>gRPC的简介与Protobuf的使用</title>
    <link href="http://chuchu-z.com/posts/gRPC-info-and-Protobuf-use/"/>
    <id>http://chuchu-z.com/posts/gRPC-info-and-Protobuf-use/</id>
    <published>2023-02-13T19:36:50.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gRPC的简介与Protobuf的使用"><a href="#gRPC的简介与Protobuf的使用" class="headerlink" title="gRPC的简介与Protobuf的使用"></a>gRPC的简介与Protobuf的使用</h1><blockquote><p><a href="https://grpc.io/docs/"><strong>gRPC</strong></a>实现微服务，将大的项目拆分为多个小且独立的业务模块；即服务；各服务之间使用高效的<strong>Protobuf</strong>协议进行RPC调用。</p><p><a href="https://developers.google.com/protocol-buffers/docs/overview"><strong>Protobuf</strong></a> 实际是一套类似<strong>Json或者XML</strong>的数据传输格式和规范，用于不同应用或进程之间进行通信时使用。通信时所传递的信息是通过Protobuf定义的<strong>message数据结构</strong>进行打包，然后编译成<strong>二进制</strong>的码流再进行传输或者存储。</p><span id="more"></span><p>gRPC开发的核心文件是*<strong>.proto</strong>文件 ，它定义了gRPC服务和消息的约定。根据这个文件，gRPC框架可以通过<strong>protoc 工具</strong>生成服务基类，消息和完整的客户端代码, 支持 <strong>C++、Java、Go、Python、Ruby、C#、Node.js、Android Java、Objective-C、PHP</strong>等多种编程语言。</p><p><strong>protoc</strong> 是用于将<strong>proto文件</strong>编程成各种语言源码文件的工具。</p></blockquote><h2 id="PHP使用gRPC"><a href="#PHP使用gRPC" class="headerlink" title="PHP使用gRPC"></a>PHP使用gRPC</h2><h3 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h3><p>在<strong>PHP</strong>中使用<strong>gRPC</strong>需要先安装<a href="http://pecl.php.net/package/gRPC"><strong>gRPC扩展</strong></a>和<a href="http://pecl.php.net/package/protobuf"><strong>protobuf扩展</strong></a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用pecl安装</span><span class="token comment"># 查看pecl版本</span>pecl version <span class="token comment">#如果没有安装 pecl</span><span class="token comment"># php版本 > 7</span><span class="token function">wget</span> http://pear.php.net/go-pear.pharphp go-pear.phar<span class="token comment"># php版本 &lt; 7</span>yum <span class="token function">install</span> php-pear<span class="token comment">#否则会报错PHP Parse error:  syntax error, unexpected //'new' (T_NEW) in /usr/share/pear/PEAR/Frontend.php on //line 91</span><span class="token comment"># 查看版本</span>/usr/local/php/bin/pear version<span class="token comment"># 使用pecl安装grpc和protobuf</span>/usr/local/php/bin/pecl <span class="token function">install</span> grpc/usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token comment"># 写入到php.ini配置(重启php生效)</span><span class="token builtin class-name">echo</span> <span class="token string">"extension=grpc.so"</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token builtin class-name">echo</span> <span class="token string">"extension=protobuf.so"</span> <span class="token operator">>></span> /usr/local/php/etc/php.iniphp <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> grpcphp <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> protobuf</code></pre><h3 id="安装protoc工具"><a href="#安装protoc工具" class="headerlink" title="安装protoc工具"></a>安装protoc工具</h3><p>下载 <strong><a href="https://github.com/protocolbuffers/protobuf/releases">protoc源码</a></strong>  具体版本要选择与<strong>proto文件</strong>中定义一致, 否则报错无法解析<strong>proto文件</strong>, 目前我们使用的是<strong>proto3</strong>,  所以我当前使用的<strong>protoc</strong>工具是<a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.10.1">3.10.1版本</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先安装协议缓存编译器(否则解析proto文件生成对应代码时会乱码)</span>yum <span class="token function">install</span> protobuf-compiler libtool libsysfs<span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> protobuf-3.10.1.tar.gz<span class="token comment"># 编译安装</span><span class="token builtin class-name">cd</span> protobuf-3.10.1./autogen.sh./configure<span class="token comment"># 如果报错 configure: WARNING: no configuration information is in third_party/googletest</span><span class="token comment"># 需要下载googletest，下载地址:https://github.com/google/googletest/releases</span><span class="token comment"># 直接解压并重命名googletest,放在 protobuf-3.10.1/third_party/googletest，然后重新执行./autogen.sh之后的</span><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 查看protoc版本</span>protoc <span class="token parameter variable">--version</span></code></pre><h3 id="使用protoc工具"><a href="#使用protoc工具" class="headerlink" title="使用protoc工具"></a>使用protoc工具</h3><p>使用protoc工具, 生成PHP代码文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行命令</span>protoc <span class="token parameter variable">--php_out</span><span class="token operator">=</span>out_dir file.proto<span class="token comment"># --php_out 表示生成PHP代码格式</span><span class="token comment"># out_dir 生成代码要存放的路径</span><span class="token comment"># file.proto 要编译的proto文件</span></code></pre><p>示例:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/gRPC-info-and-Protobuf-use/f91a56d9cea146efa2bd31cb3e807d8e.png" alt="protoc工具生成php代码1" title>                </div>                <div class="image-caption">protoc工具生成php代码1</div>            </figure> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/gRPC-info-and-Protobuf-use/257d88446cac4982a7338bb6978ce117.png" alt="protoc工具生成php代码2" title>                </div>                <div class="image-caption">protoc工具生成php代码2</div>            </figure> <h3 id="aexlib（工作目录）中调用gRPC"><a href="#aexlib（工作目录）中调用gRPC" class="headerlink" title="aexlib（工作目录）中调用gRPC"></a>aexlib（工作目录）中调用gRPC</h3><p>生成的代码放到<strong>aexlib/Lib/Plugin/</strong> 目录下, 新建一个<strong>Api.php</strong>和<strong>Client.php</strong>, 编写具体的业务逻辑, 并在<strong>aexlib/Lib/Model/**下新建</strong>model**, <strong>model</strong>内调用<strong>Api.php</strong>具体方法</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;gRPC的简介与Protobuf的使用&quot;&gt;&lt;a href=&quot;#gRPC的简介与Protobuf的使用&quot; class=&quot;headerlink&quot; title=&quot;gRPC的简介与Protobuf的使用&quot;&gt;&lt;/a&gt;gRPC的简介与Protobuf的使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://grpc.io/docs/&quot;&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;/a&gt;实现微服务，将大的项目拆分为多个小且独立的业务模块；即服务；各服务之间使用高效的&lt;strong&gt;Protobuf&lt;/strong&gt;协议进行RPC调用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/overview&quot;&gt;&lt;strong&gt;Protobuf&lt;/strong&gt;&lt;/a&gt; 实际是一套类似&lt;strong&gt;Json或者XML&lt;/strong&gt;的数据传输格式和规范，用于不同应用或进程之间进行通信时使用。通信时所传递的信息是通过Protobuf定义的&lt;strong&gt;message数据结构&lt;/strong&gt;进行打包，然后编译成&lt;strong&gt;二进制&lt;/strong&gt;的码流再进行传输或者存储。&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Other" scheme="http://chuchu-z.com/categories/other/"/>
    
    
    <category term="Other" scheme="http://chuchu-z.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 使用alias定义别名</title>
    <link href="http://chuchu-z.com/posts/linux-shell-alias-config/"/>
    <id>http://chuchu-z.com/posts/linux-shell-alias-config/</id>
    <published>2022-03-31T01:57:18.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-Shell-使用alias定义别名"><a href="#Linux-Shell-使用alias定义别名" class="headerlink" title="Linux Shell 使用alias定义别名"></a>Linux Shell 使用alias定义别名</h1><p>在我们使用终端时, 为了提高平时工作效率和减少常用命令过长, 敲起来浪费时间, 可在<code>/etc/profile</code>文件中配置<code>alias</code>，自定指令的别名</p><span id="more"></span><p>打开<code>/etc/profile</code>配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile</code></pre><p>在文件末尾增加以下配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#[alias]</span><span class="token comment">##cd dir##</span><span class="token builtin class-name">alias</span> -- -<span class="token operator">=</span><span class="token string">'cd -'</span>  <span class="token comment"># 此处意思为输入 - 回车, 相当于执行 cd -, 快速切换回上一个目录(两个目录之间来回切换)</span><span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token operator">=</span><span class="token string">'cd ..'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'exit'</span><span class="token builtin class-name">alias</span> <span class="token string">'www'</span><span class="token operator">=</span><span class="token string">'cd $www'</span> <span class="token comment"># $www是个人配置的环境变量, $www指向的是工作目录</span><span class="token comment">##vim file##</span><span class="token builtin class-name">alias</span> <span class="token string">'vp'</span><span class="token operator">=</span><span class="token string">'vim /etc/profile'</span><span class="token builtin class-name">alias</span> <span class="token string">'vv'</span><span class="token operator">=</span><span class="token string">'vim /etc/vimrc'</span><span class="token builtin class-name">alias</span> <span class="token string">'sp'</span><span class="token operator">=</span><span class="token string">'source /etc/profile'</span><span class="token comment">##git##</span><span class="token builtin class-name">alias</span> <span class="token string">'gs'</span><span class="token operator">=</span><span class="token string">'git status'</span><span class="token builtin class-name">alias</span> <span class="token string">'gaa'</span><span class="token operator">=</span><span class="token string">'git add .'</span><span class="token builtin class-name">alias</span> <span class="token string">'gcm'</span><span class="token operator">=</span><span class="token string">'git commit -m'</span><span class="token builtin class-name">alias</span> <span class="token string">'gco'</span><span class="token operator">=</span><span class="token string">'git checkout'</span><span class="token builtin class-name">alias</span> <span class="token string">'gb'</span><span class="token operator">=</span><span class="token string">'git branch -vvv'</span><span class="token builtin class-name">alias</span> <span class="token string">'gd'</span><span class="token operator">=</span><span class="token string">'git diff'</span><span class="token builtin class-name">alias</span> <span class="token string">'cls'</span><span class="token operator">=</span><span class="token string">'clear'</span><span class="token builtin class-name">alias</span> -- --<span class="token operator">=</span><span class="token string">'git checkout -'</span> <span class="token comment">#此处意思为输入 -- 回车, 相当于执行 git checkout -, 快速切换回上一个分支(两个分支之间来回切换)</span><span class="token builtin class-name">alias</span> <span class="token string">'show'</span><span class="token operator">=</span><span class="token string">'git show'</span><span class="token builtin class-name">alias</span> <span class="token string">'push'</span><span class="token operator">=</span><span class="token string">'git push origin `git branch --show-current`'</span><span class="token builtin class-name">alias</span> <span class="token string">'fpush'</span><span class="token operator">=</span><span class="token string">'git push -f origin `git branch --show-current`'</span> <span class="token comment">#强推</span><span class="token builtin class-name">alias</span> <span class="token string">'pull'</span><span class="token operator">=</span><span class="token string">'git pull origin `git branch --show-current`'</span><span class="token builtin class-name">alias</span> <span class="token string">'rpull'</span><span class="token operator">=</span><span class="token string">'git pull origin `git branch --show-current` --rebase'</span> <span class="token comment">#pull时增加 --rebase参数</span><span class="token builtin class-name">alias</span> <span class="token string">'ml'</span><span class="token operator">=</span><span class="token string">'git log --author=`git config user.name`'</span> <span class="token comment">#查看本人提交的log</span><span class="token builtin class-name">alias</span> <span class="token string">'gl'</span><span class="token operator">=</span><span class="token string">'git log'</span><span class="token builtin class-name">alias</span> <span class="token string">'ggl'</span><span class="token operator">=</span><span class="token string">'git log --graph'</span><span class="token builtin class-name">alias</span> <span class="token string">'gglp'</span><span class="token operator">=</span><span class="token string">'git log --graph --pretty=oneline --abbrev-commit'</span><span class="token comment">#可视化查看分支线的情况</span><span class="token builtin class-name">alias</span> <span class="token string">'review'</span><span class="token operator">=</span><span class="token string">'review() &#123; git status --short | egrep ^*.php | sed "s/^ *//" | egrep ^[^D] | tr -s " "| cut -d" " -f 2 | egrep -v database/migrations | xargs $1;&#125;;review'</span>  <span class="token comment">#列出修改过未提交的php文件</span><span class="token builtin class-name">alias</span> <span class="token string">'qq'</span><span class="token operator">=</span><span class="token string">'review "git checkout"'</span><span class="token comment">#把列出修改过未提交的php文件当做参数 提供给git checkout, 全部撤销</span><span class="token comment">##ssh##</span><span class="token builtin class-name">alias</span> <span class="token string">'chuchu'</span><span class="token operator">=</span><span class="token string">'ssh root@ip'</span><span class="token comment">##Docker##</span><span class="token builtin class-name">alias</span> <span class="token string">'dkre'</span><span class="token operator">=</span><span class="token string">'docker-compose restart'</span><span class="token builtin class-name">alias</span> <span class="token string">'dkup'</span><span class="token operator">=</span><span class="token string">'docker-compose up'</span><span class="token builtin class-name">alias</span> <span class="token string">'dkop'</span><span class="token operator">=</span><span class="token string">'docker-compose stop'</span><span class="token builtin class-name">alias</span> <span class="token string">'dkphp'</span><span class="token operator">=</span><span class="token string">"winpty docker exec -it <span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--filter</span><span class="token operator">=</span><span class="token string">'name=php7'</span> <span class="token parameter variable">-q</span><span class="token variable">`</span></span> bash"</span> <span class="token comment">#快速进入docker的php7容器</span><span class="token builtin class-name">alias</span> <span class="token string">'dkphp5'</span><span class="token operator">=</span><span class="token string">"winpty docker exec -it <span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--filter</span><span class="token operator">=</span><span class="token string">'name=php5'</span> <span class="token parameter variable">-q</span><span class="token variable">`</span></span> bash"</span></code></pre><p>执行 <code>source /etc/profile</code> 重新加载刚修改配置生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux-Shell-使用alias定义别名&quot;&gt;&lt;a href=&quot;#Linux-Shell-使用alias定义别名&quot; class=&quot;headerlink&quot; title=&quot;Linux Shell 使用alias定义别名&quot;&gt;&lt;/a&gt;Linux Shell 使用alias定义别名&lt;/h1&gt;&lt;p&gt;在我们使用终端时, 为了提高平时工作效率和减少常用命令过长, 敲起来浪费时间, 可在&lt;code&gt;/etc/profile&lt;/code&gt;文件中配置&lt;code&gt;alias&lt;/code&gt;，自定指令的别名&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://chuchu-z.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="http://chuchu-z.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git 中的奇葩玩法</title>
    <link href="http://chuchu-z.com/posts/git-ridiculous-behavior/"/>
    <id>http://chuchu-z.com/posts/git-ridiculous-behavior/</id>
    <published>2022-03-25T11:01:50.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="随机的-git-commit-你敢提交吗"><a href="#随机的-git-commit-你敢提交吗" class="headerlink" title="随机的 git commit 你敢提交吗"></a>随机的 git commit 你敢提交吗</h2><blockquote><p>一个 Git 随机生成提交日志网站, 每次刷新的内容随机</p><p>太搞了, 不怕挨揍的壮士可以使用如下命令进行日常代码的提交😂</p></blockquote><span id="more"></span><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> http://whatthecommit.com/index.txt<span class="token variable">)</span></span></code></pre><p><a href="http://whatthecommit.com/">http://whatthecommit.com</a></p><h2 id="没有最坑，只有更坑！"><a href="#没有最坑，只有更坑！" class="headerlink" title="没有最坑，只有更坑！"></a>没有最坑，只有更坑！</h2><p>此仓库专门收集史上最坑爹的代码片段，专治低血压 😁</p><p><a href="https://gitee.com/oschina/bullshit-codes/tree/master">https://gitee.com/oschina/bullshit-codes/tree/master</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;随机的-git-commit-你敢提交吗&quot;&gt;&lt;a href=&quot;#随机的-git-commit-你敢提交吗&quot; class=&quot;headerlink&quot; title=&quot;随机的 git commit 你敢提交吗&quot;&gt;&lt;/a&gt;随机的 git commit 你敢提交吗&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个 Git 随机生成提交日志网站, 每次刷新的内容随机&lt;/p&gt;
&lt;p&gt;太搞了, 不怕挨揍的壮士可以使用如下命令进行日常代码的提交😂&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Git" scheme="http://chuchu-z.com/categories/git/"/>
    
    
    <category term="Git" scheme="http://chuchu-z.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于谷歌Chrome浏览器非安全端口限制问题</title>
    <link href="http://chuchu-z.com/posts/chrome-proxy-limit/"/>
    <id>http://chuchu-z.com/posts/chrome-proxy-limit/</id>
    <published>2022-03-24T04:38:16.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<p>关于前段时间深圳疫情严重, 公司选择通过VPN居家远程办公</p><p>有个项目在App端测试由于无法通过VPN请求Api, 运维开放了外网地址并指定端口</p><span id="more"></span><p>但在<code>Chrome</code>浏览器上打开时无法正常得到正常的响应, 而使用<code>postman</code>等测试工具是可以正常响应的</p><p>这个问题以前有遇到过，是因为 <code>Chrome</code> 浏览器对非安全端口进行了限制, 具体端口可在这里查看</p><p><a href="https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc">https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc</a></p><h2 id="解决的办法"><a href="#解决的办法" class="headerlink" title="解决的办法"></a>解决的办法</h2><p>windows只需要右键<code>Chrome</code>浏览器快捷图标, 在<code>属性</code>设置里面的<code>目标</code>处增加以下参数,  然后关闭<code>Chrome</code>重新打开即可正常访问</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 多个端口号以英文逗号隔开</span>--explicitly-allowed-ports<span class="token operator">=</span><span class="token number">10080,30300</span></code></pre><p><img src="https://aexphoto-1251755124.file.myqcloud.com/img/2022/03/69ffe943a57fbc38de7c4e6b52f30fec.png" alt="image-20220324140658057"></p><p>Mac</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Chrome浏览器的解决方案</span><span class="token function">open</span> <span class="token parameter variable">-a</span> /Applications/Google Chrome.app/Contents/MacOS/Google Chrome --explicitly-allowed-ports<span class="token operator">=</span><span class="token number">6666,8888</span></code></pre><h2 id="Chrome-302重定向"><a href="#Chrome-302重定向" class="headerlink" title="Chrome 302重定向"></a>Chrome 302重定向</h2><p>本以为解决完端口问题后就可以快乐地编码, 然而当我正常打开页面登录后, 又遇到了另一个问题</p><p>登录成功后, 只要点击其他任意跳转, 页面会被重定向跳回到登录界面, 初步判断是因为<code>Cookies</code>的问题, 导致登录态没有了</p><blockquote><p>  遗留问题1. 无法确定是因为端口的问题导致<code>Cookies</code>丢失</p></blockquote><p>具体是事例在网上只找到了这个, 不确定是否同样的原因, 但因为我的<code>Chrome</code>浏览器版本目前是<code>99.0.4844.82</code>版本, 正如此博主所说</p><p>在<code>chrome91</code>及其以上版本，无法找到<code>SameSite by default cookies</code>和<code>Cookies without SameSite must be secure</code>两项配置</p><p>虽然没有解决我的问题, 但起码提供了参考</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://aexphoto-1251755124.file.myqcloud.com/img/2022/03/2067d66b7b939b94f21ae22acabc8668.png" alt title>                </div>                <div class="image-caption"></div>            </figure><blockquote><p>  遗留问题2. 无法验证该方案是否可行</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于前段时间深圳疫情严重, 公司选择通过VPN居家远程办公&lt;/p&gt;
&lt;p&gt;有个项目在App端测试由于无法通过VPN请求Api, 运维开放了外网地址并指定端口&lt;/p&gt;</summary>
    
    
    
    <category term="Other" scheme="http://chuchu-z.com/categories/other/"/>
    
    
    <category term="Other" scheme="http://chuchu-z.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Win10 自定义 Git-Bash 终端界面 + 一言API与终端结合</title>
    <link href="http://chuchu-z.com/posts/windows10-git-bash/"/>
    <id>http://chuchu-z.com/posts/windows10-git-bash/</id>
    <published>2022-02-25T02:39:27.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Win10-自定义-Git-Bash-终端界面-一言API与终端结合"><a href="#Win10-自定义-Git-Bash-终端界面-一言API与终端结合" class="headerlink" title="Win10 自定义 Git-Bash 终端界面 + 一言API与终端结合"></a>Win10 自定义 Git-Bash 终端界面 + 一言API与终端结合</h1><p>由于Git默认的界面长的实在是不够美观, 平时用起来都无法赏心悦目, 参考网上的一些文章资料, 做了下改动</p><span id="more"></span><h3 id="修改Git-Bash-窗口左上角标题"><a href="#修改Git-Bash-窗口左上角标题" class="headerlink" title="修改Git Bash 窗口左上角标题"></a>修改Git Bash 窗口左上角标题</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#该命令是一次性的,关闭后重新打开会恢复, 后面有完整的 </span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-ne</span> <span class="token string">"<span class="token entity" title="\\">\\</span>e]0;title name<span class="token entity" title="\\">\\</span>a"</span></code></pre><h3 id="修改命令提示符"><a href="#修改命令提示符" class="headerlink" title="修改命令提示符"></a>修改命令提示符</h3><p>具体操作</p><p>打开 git-prompt.sh 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile.d/git-prompt.sh</code></pre><p>将其修改为如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-f</span> /etc/profile.d/git-sdk.sh<span class="token keyword">then</span>    <span class="token assign-left variable">TITLEPREFIX</span><span class="token operator">=</span>SDK-<span class="token variable">$&#123;MSYSTEM<span class="token operator">#</span>MINGW&#125;</span><span class="token keyword">else</span>    <span class="token assign-left variable">TITLEPREFIX</span><span class="token operator">=</span><span class="token variable">$MSYSTEM</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-f</span> ~/.config/git/git-prompt.sh<span class="token keyword">then</span>    <span class="token builtin class-name">.</span> ~/.config/git/git-prompt.sh<span class="token keyword">else</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'\[\033]0;Bash\007\]'</span>      <span class="token comment"># 窗口标题</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\n'</span>                 <span class="token comment"># 换行</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\[\033[32;1m\]'</span>     <span class="token comment"># 高亮绿色</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">' ➜ '</span>               <span class="token comment"># unicode 字符，右箭头, 如果显示不出来大概率是utf-8编码问题</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\[\033[33;1m\]'</span>     <span class="token comment"># 高亮黄色</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\W'</span>                 <span class="token comment"># 当前目录</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\[\033[34;1m\]'</span>     <span class="token comment"># 高亮蓝色</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">' [\t]'</span>              <span class="token comment"># 当前时间</span>        <span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$WINELOADERNOEXEC</span>"</span>    <span class="token keyword">then</span>        <span class="token assign-left variable">GIT_EXEC_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> --exec-path <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token variable">)</span></span>"</span>        <span class="token assign-left variable">COMPLETION_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;GIT_EXEC_PATH<span class="token operator">%</span><span class="token operator">/</span>libexec<span class="token operator">/</span>git-core&#125;</span>"</span>        <span class="token assign-left variable">COMPLETION_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;COMPLETION_PATH<span class="token operator">%</span><span class="token operator">/</span>lib<span class="token operator">/</span>git-core&#125;</span>"</span>        <span class="token assign-left variable">COMPLETION_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/share/git/completion"</span>        <span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/git-prompt.sh"</span>        <span class="token keyword">then</span>            <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/git-completion.bash"</span>            <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/git-prompt.sh"</span>            <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\[\033[31m\]'</span>   <span class="token comment"># 红色</span>            <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'`__git_ps1`'</span>    <span class="token comment"># git 插件</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span><span class="token string">'\[\033[36m\] '</span>      <span class="token comment"># 青色</span><span class="token keyword">fi</span><span class="token assign-left variable">MSYS2_PS1</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PS1</span>"</span></code></pre><p>这个非常像 oh-my-zsh 的风格, 其实一开始就是想用zsh终端的, 奈何windows不支持, 如果平时日常开发想装的话也可以在linux虚拟主机或者docker里面装一个, zsh在目前来说可以说是最强大的shell了, 谁用谁知道</p><h3 id="修改界面主题"><a href="#修改界面主题" class="headerlink" title="修改界面主题"></a>修改界面主题</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.minttyrc</code></pre><p>默认配置如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">Transparency</span><span class="token operator">=</span>low<span class="token assign-left variable">Language</span><span class="token operator">=</span><span class="token assign-left variable">ForegroundColour</span><span class="token operator">=</span><span class="token number">0,255</span>,64<span class="token assign-left variable">CursorColour</span><span class="token operator">=</span><span class="token number">0,255</span>,64<span class="token assign-left variable">CursorType</span><span class="token operator">=</span>block<span class="token assign-left variable">Scrollbar</span><span class="token operator">=</span>none<span class="token assign-left variable">FontHeight</span><span class="token operator">=</span><span class="token number">12</span></code></pre><p>把以下内容添加到配置文件里面：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">Font</span><span class="token operator">=</span>Fira Code Medium<span class="token assign-left variable">FontHeight</span><span class="token operator">=</span><span class="token number">14</span><span class="token assign-left variable">FontHeight</span><span class="token operator">=</span><span class="token number">14</span><span class="token assign-left variable">Transparency</span><span class="token operator">=</span>low<span class="token assign-left variable">FontSmoothing</span><span class="token operator">=</span>default<span class="token assign-left variable">Locale</span><span class="token operator">=</span>C<span class="token assign-left variable">Charset</span><span class="token operator">=</span>UTF-8<span class="token assign-left variable">Columns</span><span class="token operator">=</span><span class="token number">88</span><span class="token assign-left variable">Rows</span><span class="token operator">=</span><span class="token number">26</span><span class="token assign-left variable">OpaqueWhenFocused</span><span class="token operator">=</span>no<span class="token assign-left variable">Scrollbar</span><span class="token operator">=</span>none<span class="token assign-left variable">Language</span><span class="token operator">=</span>zh_CN<span class="token assign-left variable">ForegroundColour</span><span class="token operator">=</span><span class="token number">131,148</span>,150<span class="token assign-left variable">BackgroundColour</span><span class="token operator">=</span><span class="token number">0,43</span>,54<span class="token assign-left variable">CursorColour</span><span class="token operator">=</span><span class="token number">220,130</span>,71<span class="token assign-left variable">BoldBlack</span><span class="token operator">=</span><span class="token number">128,128</span>,128<span class="token assign-left variable">Red</span><span class="token operator">=</span><span class="token number">255,64</span>,40<span class="token assign-left variable">BoldRed</span><span class="token operator">=</span><span class="token number">255,128</span>,64<span class="token assign-left variable">Green</span><span class="token operator">=</span><span class="token number">64,200</span>,64<span class="token assign-left variable">BoldGreen</span><span class="token operator">=</span><span class="token number">64,255</span>,64<span class="token assign-left variable">Yellow</span><span class="token operator">=</span><span class="token number">190,190</span>,0<span class="token assign-left variable">BoldYellow</span><span class="token operator">=</span><span class="token number">255,255</span>,64<span class="token assign-left variable">Blue</span><span class="token operator">=</span><span class="token number">0,128</span>,255<span class="token assign-left variable">BoldBlue</span><span class="token operator">=</span><span class="token number">128,160</span>,255<span class="token assign-left variable">Magenta</span><span class="token operator">=</span><span class="token number">211,54</span>,130<span class="token assign-left variable">BoldMagenta</span><span class="token operator">=</span><span class="token number">255,128</span>,255<span class="token assign-left variable">Cyan</span><span class="token operator">=</span><span class="token number">64,190</span>,190<span class="token assign-left variable">BoldCyan</span><span class="token operator">=</span><span class="token number">128,255</span>,255<span class="token assign-left variable">White</span><span class="token operator">=</span><span class="token number">200,200</span>,200<span class="token assign-left variable">BoldWhite</span><span class="token operator">=</span><span class="token number">255,255</span>,255<span class="token assign-left variable">BellTaskbar</span><span class="token operator">=</span>no<span class="token assign-left variable">Term</span><span class="token operator">=</span>xterm<span class="token assign-left variable">FontWeight</span><span class="token operator">=</span><span class="token number">400</span><span class="token assign-left variable">FontIsBold</span><span class="token operator">=</span>no</code></pre><p>最后重启Git-Bash就可以看到配置好的界面了</p><p>效果图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://aexphoto-1251755124.file.myqcloud.com/img/2022/02/b59d6821407fde73b5f757df99c3b600.png" alt="image-20220225095728006" title>                </div>                <div class="image-caption">image-20220225095728006</div>            </figure><p>另外说一下第一行是在 Options 中选择字体时设置的，我使用了 Fira Code， 14号字体,   Fira Code就是一款为写程序而生的字体</p><p>以上内容参考网络文章 有兴趣的可以深入了解<a href="http://www.voidcn.com/article/p-wavhthxe-tr.html">这里</a>, 不过也有可能无法访问了</p><h3 id="Fira-Code"><a href="#Fira-Code" class="headerlink" title="Fira Code"></a>Fira Code</h3><p><a href="https://www.jianshu.com/p/266b4fa2c446?tdsourcetag=s_pctim_aiomsg">Fira</a> 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有<code>等宽</code>等基本属性外，还加入了编程连字特性（ligatures）。</p><p>Fira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「&gt;=」变成「≥ 」等等，以此来提高代码的可读性</p><p>本人的使用的IDE也是装的这一款字体, 咳咳跑题了..</p><h3 id="一言与终端结合"><a href="#一言与终端结合" class="headerlink" title="一言与终端结合"></a>一言与终端结合</h3><p>去年无意发现一个名叫 <a href="https://hitokoto.cn/">一言</a> 的网站, 这个网站只是单纯的提供一句话,  可以是动漫中的台词，也可以是网络上的各种小段子。 或是感动，或是开心，有或是单纯的回忆</p><p> 并且还官方还提供了 <a href="https://developer.hitokoto.cn/sentence/#%E7%AE%80%E4%BB%8B">API接口文档</a> 供我们免费调用, 于是并尝试了把该功能与终端做结合, 大概就是, 启动终端时请求API, 把随机返回的句子显示在终端上, 我认为是个有趣的想法, 具体实现思路, 写一个请求一言API的脚本, 终端启动时自动调用一次这个脚本</p><p>效果如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://aexphoto-1251755124.file.myqcloud.com/img/2022/02/6000258bf5290f8a45b134500f78ed39.png" alt="图片" title>                </div>                <div class="image-caption">图片</div>            </figure><p>编写一言脚本, 文件名和路径没有具体要求, 看个人</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> yy</code></pre><p>具体代码<a href="https://github.com/chuchu-z/local-config/blob/master/yy">GitHub</a>上也有,  直接拿下面的也行:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 一言</span><span class="token comment"># 返回普通文本</span><span class="token comment">#`curl -ks https://v1.hitokoto.cn/?encode=text`</span><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">'https://v1.hitokoto.cn'</span><span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token variable">$1</span> <span class="token operator">!=</span> x <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">'https://v1.hitokoto.cn?'</span><span class="token variable">$1</span><span class="token keyword">fi</span><span class="token comment"># 处理 json 数据(处理json数据需要安装jq)</span><span class="token assign-left variable">json</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-ks</span> $url<span class="token variable">`</span></span><span class="token comment"># linux 安裝jq</span><span class="token comment"># yum install epel-release</span><span class="token comment"># yum list jq</span><span class="token comment"># yum install jq</span><span class="token comment"># windows 安裝jq</span><span class="token comment"># https://stedolan.github.io/jq/</span><span class="token assign-left variable">random</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token environment constant">RANDOM</span>%7+31<span class="token punctuation">]</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span><span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>json<span class="token punctuation">&#125;</span> <span class="token operator">|</span> jq <span class="token string">'.hitokoto'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/"//g'</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n'</span><span class="token variable">`</span></span><span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[1;<span class="token variable">$&#123;random&#125;</span>m%s<span class="token entity" title="\033">\033</span>[0m"</span> <span class="token string">"『 "</span> <span class="token variable">$content</span> <span class="token string">" 』"</span><span class="token assign-left variable">from_who</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>json<span class="token punctuation">&#125;</span> <span class="token operator">|</span> jq <span class="token string">'.from_who'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/"//g'</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n'</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$from_who</span>"</span> <span class="token operator">==</span> <span class="token string">'null'</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token assign-left variable">from_who</span><span class="token operator">=</span><span class="token string">'匿名'</span><span class="token keyword">fi</span><span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>#content<span class="token punctuation">&#125;</span> <span class="token punctuation">\</span>* <span class="token number">2</span><span class="token variable">`</span></span><span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[1;<span class="token variable">$&#123;random&#125;</span>m%<span class="token variable">$&#123;length&#125;</span>s<span class="token entity" title="\033">\033</span>[0m"</span> <span class="token string">"—— <span class="token variable">$from_who</span>"</span><span class="token assign-left variable">from</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>json<span class="token punctuation">&#125;</span> <span class="token operator">|</span> jq <span class="token string">'.from'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/"//g'</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n'</span><span class="token variable">`</span></span><span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[1;<span class="token variable">$&#123;random&#125;</span>m%s<span class="token entity" title="\033">\033</span>[0m"</span> <span class="token string">"「"</span> <span class="token variable">$from</span> <span class="token string">"」"</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span><span class="token builtin class-name">exit</span> <span class="token number">0</span></code></pre><p>编写完后可以试着执行 yy脚本一下试试 (代码里有说明要安装jq处理json数据)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://aexphoto-1251755124.file.myqcloud.com/img/2022/02/4bafe9395e8ebc8797efa3ffe93e244e.png" alt="具体效果" title>                </div>                <div class="image-caption">具体效果</div>            </figure><p>最后编辑~/.bashrc文件, 因为Git-Bash启动时会加载此文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc</code></pre><p>在文件内容里加上yy后保存退出重新启动Git-Bash就行, (我能直接执行yy是配置了环境变量的, 如果没有配置的话需要写绝对路径)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim ~/.bashrc</span><span class="token comment"># Git-Bash 初始化加载此配置文件</span><span class="token comment"># shopt -s expand_aliases</span><span class="token comment"># 允许shell脚本中使用 alias 命令</span><span class="token comment"># 经测试, 在 #!/bin/sh 下, 该命令可有可无, 不影响 alias 的使用</span><span class="token comment"># 在 !/bin/bash 下，才有影响</span>yy</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Win10-自定义-Git-Bash-终端界面-一言API与终端结合&quot;&gt;&lt;a href=&quot;#Win10-自定义-Git-Bash-终端界面-一言API与终端结合&quot; class=&quot;headerlink&quot; title=&quot;Win10 自定义 Git-Bash 终端界面 + 一言API与终端结合&quot;&gt;&lt;/a&gt;Win10 自定义 Git-Bash 终端界面 + 一言API与终端结合&lt;/h1&gt;&lt;p&gt;由于Git默认的界面长的实在是不够美观, 平时用起来都无法赏心悦目, 参考网上的一些文章资料, 做了下改动&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="http://chuchu-z.com/categories/git/"/>
    
    
    <category term="Git" scheme="http://chuchu-z.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker环境初始化及安装php扩展</title>
    <link href="http://chuchu-z.com/posts/docker-init-php-extensions/"/>
    <id>http://chuchu-z.com/posts/docker-init-php-extensions/</id>
    <published>2021-12-30T06:53:42.000Z</published>
    <updated>2023-09-20T02:50:30.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker环境初始化及安装php扩展"><a href="#Docker环境初始化及安装php扩展" class="headerlink" title="Docker环境初始化及安装php扩展"></a>Docker环境初始化及安装php扩展</h3><blockquote><p>这只是一段操作命令的过程, 没有任何值得学习的地方…😁</p></blockquote><span id="more"></span><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token function">vim</span> /root/.bashrc<span class="token comment"># 设置alias</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'exit'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">www</span><span class="token operator">=</span><span class="token string">'cd /home/www/task_server'</span><span class="token comment"># 写入设置utf8编码,否则乱码,设置好后先保存退出,并执行source /root/.bashrc生效,再设置PS1变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">"en_US.utf8"</span><span class="token comment"># 设置完编码后这里先退出保存一次,先让编码生效, 然后再打开编辑</span><span class="token builtin class-name">source</span> /root/.bashrc<span class="token comment"># 设置PS1变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"\[<span class="token entity" title="\033">\033</span>]0;Docker<span class="token entity" title="\007">\007</span>\]<span class="token entity" title="\n">\n</span>\[<span class="token entity" title="\033">\033</span>[32;1m\] ➜ \[<span class="token entity" title="\033">\033</span>[33;1m\]\W\[<span class="token entity" title="\033">\033</span>[34;1m\] [<span class="token entity" title="\t">\t</span>]\[<span class="token entity" title="\033">\033</span>[31m\]\[<span class="token entity" title="\033">\033</span>[36m\] "</span><span class="token comment"># 保存退出</span><span class="token builtin class-name">source</span> /root/.bashrc<span class="token comment"># 新框架资产中心需要用到GRPC, Docker环境下安装GRPC</span><span class="token comment"># 查看版本</span>pecl version <span class="token comment">#如果没有安装 pecl</span><span class="token comment"># php版本 > 7</span><span class="token function">wget</span> http://pear.php.net/go-pear.pharphp go-pear.phar<span class="token comment"># php版本 &lt; 7</span>yum <span class="token function">install</span> php-pear<span class="token comment">#否则会报错PHP Parse error:  syntax error, unexpected //'new' (T_NEW) in /usr/share/pear/PEAR/Frontend.php on //line 91</span><span class="token comment"># 安装 grpc</span>pecl <span class="token function">install</span> grpc<span class="token comment"># 因为pecl没有加入PATH变量, 如果默认pecl PHP版本小于7.0 则可以使用一下路径方式或者把/usr/local/php/bin/加入PATH变量</span>/usr/local/php/bin/pecl <span class="token function">install</span> protobuf/usr/local/php/bin/pecl <span class="token function">install</span> grpc/usr/local/php/bin/pecl <span class="token function">install</span> apcu<span class="token comment"># GCC版本4.8编译报错, 升级版本到gcc 7.3</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> centos-release-sclyum <span class="token parameter variable">-y</span> <span class="token function">install</span> devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutilsscl <span class="token builtin class-name">enable</span> devtoolset-7 <span class="token function">bash</span><span class="token builtin class-name">echo</span> <span class="token string">"source /opt/rh/devtoolset-7/enable"</span> <span class="token operator">>></span>/etc/profile<span class="token comment"># ssh证书问题 如果没有openssl文件夹先创建</span><span class="token function">wget</span> http://curl.haxx.se/ca/cacert.pem <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> cacert.pem /usr/local/openssl/cert.pem<span class="token comment"># 写入配置</span><span class="token builtin class-name">echo</span> <span class="token string">"extension=grpc.so"</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token builtin class-name">echo</span> <span class="token string">"extension=protobuf.so"</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token builtin class-name">echo</span> <span class="token string">"extension=apcu.so"</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token comment">#重启Docker</span></code></pre><h3 id="Docker-启动报错"><a href="#Docker-启动报错" class="headerlink" title="Docker 启动报错"></a>Docker 启动报错</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Docker.Core.Backend.BackendException:Error response from daemon: <span class="token function">open</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>.<span class="token punctuation">\</span>pipe<span class="token punctuation">\</span>docker_engine_linux: The system cannot <span class="token function">find</span> the <span class="token function">file</span> specified.</code></pre><p><strong>在win10 管理员身份打开cmd命令行提示符执行:</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">Net stop com.docker.serviceNet start com.docker.service</code></pre><h3 id="以往安装时执行过的命令参考"><a href="#以往安装时执行过的命令参考" class="headerlink" title="以往安装时执行过的命令参考"></a>以往安装时执行过的命令参考</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>   vp<span class="token number">2</span>   php <span class="token parameter variable">-m</span><span class="token number">3</span>   e<span class="token number">4</span>   <span class="token builtin class-name">logout</span><span class="token number">5</span>   <span class="token builtin class-name">exit</span><span class="token number">6</span>   <span class="token builtin class-name">exit</span><span class="token number">7</span>   yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token number">8</span>   <span class="token function">vim</span> /root/.bashrc<span class="token number">9</span>   <span class="token builtin class-name">source</span> /root/.bashrc<span class="token number">10</span>  <span class="token function">vim</span> /root/.bashrc<span class="token number">11</span>  <span class="token builtin class-name">source</span> /root/.bashrc<span class="token number">12</span>  pecl version <span class="token number">13</span>  <span class="token function">wget</span> http://pear.php.net/go-pear.phar<span class="token number">14</span>  php go-pear.phar<span class="token number">15</span>  <span class="token function">wget</span> http://pear.php.net/go-pear.phar<span class="token number">16</span>  php go-pear.phar<span class="token number">17</span>  yum <span class="token function">install</span> php-pear<span class="token number">18</span>  pecl <span class="token function">install</span> grpc<span class="token number">19</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">20</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">21</span>  /usr/local/php/bin/pecl <span class="token function">install</span> grpc<span class="token number">22</span>  yum <span class="token function">install</span> php70w-devel<span class="token number">23</span>  /usr/bin/phpize<span class="token number">24</span>  <span class="token function">which</span> phpize<span class="token number">25</span>  /usr/bin/phpize<span class="token number">26</span>  yum <span class="token function">install</span> php-devel <span class="token number">27</span>  php <span class="token parameter variable">-v</span><span class="token number">28</span>  yum <span class="token function">install</span> php70w-devel <span class="token number">29</span>  /usr/bin/phpize<span class="token number">30</span>  <span class="token function">which</span> php<span class="token number">31</span>  <span class="token builtin class-name">cd</span> /usr/local/bin/php<span class="token number">32</span>  <span class="token builtin class-name">pwd</span><span class="token number">33</span>  ll<span class="token number">34</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">35</span>  /usr/local/php/bin/pecl <span class="token function">install</span> grpc<span class="token number">36</span>  gcc <span class="token parameter variable">--version</span><span class="token number">37</span>  g++ <span class="token parameter variable">--version</span><span class="token number">38</span>  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> centos-release-scl<span class="token number">39</span>  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> devtoolset-6-gcc devtoolset-6-gcc-c++ devtoolset-6-binutils<span class="token number">40</span>  scl <span class="token builtin class-name">enable</span> devtoolset-6 <span class="token function">bash</span><span class="token number">41</span>  yum <span class="token function">install</span> centos-release-scl scl-utils-build<span class="token number">42</span>  yum list all <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span><span class="token string">'centos-sclo-rh'</span><span class="token number">43</span>  yum <span class="token function">install</span> devtoolset-4-gcc.x86_64 devtoolset-4-gcc-c++.x86_64 devtoolset-4-gcc-gdb-plugin.x86_64 <span class="token number">44</span>  scl <span class="token parameter variable">--list</span> 或 scl <span class="token parameter variable">-l</span><span class="token number">45</span>  scl <span class="token parameter variable">--list</span><span class="token number">46</span>  gcc <span class="token parameter variable">-v</span><span class="token number">47</span>  php <span class="token parameter variable">-m</span><span class="token number">48</span>  e<span class="token number">49</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">50</span>  /usr/local/php/bin/pecl channel-update pecl.php.net<span class="token number">51</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">52</span>  e<span class="token number">53</span>  pecl version <span class="token number">54</span>  <span class="token function">wget</span> http://pear.php.net/go-pear.phar<span class="token number">55</span>  php go-pear.phar<span class="token number">56</span>  <span class="token function">vim</span> /etc/profile<span class="token number">57</span>  <span class="token function">vim</span> ~/.bashrc <span class="token number">58</span>  <span class="token function">vim</span> ~/.bashrc <span class="token number">59</span>  <span class="token builtin class-name">source</span> ~/.bashrc<span class="token number">60</span>  gcc <span class="token parameter variable">--version</span><span class="token number">61</span>  g++ <span class="token parameter variable">--version</span><span class="token number">62</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">63</span>  <span class="token function">wget</span> http://curl.haxx.se/ca/cacert.pem <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> cacert.pem /usr/local/openssl/cert.pem<span class="token number">64</span>  ll<span class="token number">65</span>  /usr/local/php/bin/pecl <span class="token function">install</span> protobuf<span class="token number">66</span>  /usr/local/php/bin/pecl <span class="token function">install</span> grpc<span class="token number">67</span>  /usr/local/php/bin/pecl <span class="token function">install</span> grpc<span class="token number">68</span>  /usr/local/php/bin/pecl <span class="token function">install</span> apcu<span class="token number">69</span>  /usr/local/php/bin/pecl <span class="token function">install</span> apcu<span class="token number">70</span>  <span class="token function">wget</span> http://curl.haxx.se/ca/cacert.pem <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> cacert.pem /usr/local/openssl/cert.pem<span class="token number">71</span>  ll<span class="token number">72</span>  <span class="token builtin class-name">cd</span> /usr/local/openssl<span class="token number">73</span>  <span class="token builtin class-name">cd</span> /usr/local/<span class="token number">74</span>  <span class="token function">mkdir</span> openssl<span class="token number">75</span>  <span class="token builtin class-name">cd</span> -<span class="token number">76</span>  <span class="token function">mv</span> cacert.pem /usr/local/openssl/cert.pem<span class="token number">77</span>  /usr/local/php/bin/pecl <span class="token function">install</span> apcu<span class="token number">78</span>  <span class="token function">vim</span> /usr/local/php/etc/php.ini<span class="token number">79</span>  e<span class="token number">80</span>  pecl <span class="token function">install</span> grpc<span class="token number">81</span>  pecl channel-update pecl.php.net<span class="token number">82</span>  pecl <span class="token function">install</span> grpc<span class="token number">83</span>  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> centos-release-scl<span class="token number">84</span>  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils<span class="token number">85</span>  scl <span class="token builtin class-name">enable</span> devtoolset-7 <span class="token function">bash</span><span class="token number">86</span>  e<span class="token number">87</span>  www<span class="token number">88</span>  php tinyBell.php<span class="token number">89</span>  php tinyBell.php start<span class="token number">90</span>  php tinyBell.php start<span class="token number">91</span>  <span class="token builtin class-name">pwd</span><span class="token number">92</span>  e</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Docker环境初始化及安装php扩展&quot;&gt;&lt;a href=&quot;#Docker环境初始化及安装php扩展&quot; class=&quot;headerlink&quot; title=&quot;Docker环境初始化及安装php扩展&quot;&gt;&lt;/a&gt;Docker环境初始化及安装php扩展&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这只是一段操作命令的过程, 没有任何值得学习的地方…😁&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://chuchu-z.com/categories/docker/"/>
    
    
    <category term="Docker" scheme="http://chuchu-z.com/tags/docker/"/>
    
  </entry>
  
</feed>
